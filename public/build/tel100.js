/*
 * File: app/model/Tel100.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.Tel100', {
  extend: 'Ext.data.schema.Schema',
  alias: 'schema.tel100'
});
/*
 * File: app/model/User.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.User', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  fields: [
    {
      name: 'mobile'
    },
    {
      name: 'phone'
    },
    {
      name: 'first_name'
    },
    {
      name: 'last_name'
    },
    {
      calculate: function(data) {
        var mobile = data.mobile;
        if (mobile && mobile.length === 9) {
          return '(' + mobile.substr(0,3) + ')' + mobile.substr(3,3) + '-' + mobile.substr(6,3);
        }
        return mobile;
      },
      name: 'formatted_mobile'
    },
    {
      calculate: function(data) {
        var phone = data.phone;
        if (phone && phone.length === 4) {
          return phone.substr(0, 1) + '-' + phone.substr(1);
        } else if (phone && phone.length === 3) {
          return '7-' + phone;
        }
        return phone;
      },
      name: 'formatted_phone'
    },
    {
      calculate: function(data) {
        return data.first_name + ' ' + data.last_name;
      },
      name: 'full_name'
    }
  ],

  proxy: {
    type: 'rest',
    url: '/api/sys/users'
  }
});
/*
 * File: app/store/CustomFolders.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.store.CustomFolders', {
  extend: 'Ext.data.Store',


  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'customfolders',
      autoLoad: false,
      model: 'Tel100.model.folder.Base'
    }, cfg)]);
  }
});
/*
 * File: app/view/Main.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.Main', {
  extend: 'Ext.container.Viewport',
  alias: 'widget.main',


  controller: 'main',
  viewModel: {
    type: 'main'
  },
  itemId: 'main-viewport',

  layout: {
    type: 'card',
    deferredRender: true
  },
  items: [
    {
      xtype: 'container',
      layout: {
        type: 'vbox',
        align: 'center',
        pack: 'center'
      },
      items: [
        {
          xtype: 'userloginpanel',
          itemId: 'login',
          listeners: {
            loggedin: 'onLoggedin'
          }
        },
        {
          xtype: 'workarealocaleselector',
          margin: 8
        }
      ]
    },
    {
      xtype: 'workareapanel',
      itemId: 'workarea'
    }
  ],
  listeners: {
    beforerender: 'onBeforeRender'
  }

});
/*
 * File: app/view/MainViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.MainViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.main',

  onLoggedin: function(user) {
    // set current user
    var user = helpers.user.getCurrentUser();
    this.getViewModel().set('currentUser', user);

    // open UI
    var view = this.getView();
    var layout = view.getLayout();
    layout.setActiveItem('workarea');
  },

  onBeforeRender: function(component, eOpts) {
    var locale = helpers.i18n.getCurrentLocale();
    var i18n = window[locale];
    window.i18n = i18n;
    var viewModel = this.getViewModel();
    viewModel.set('i18n', i18n);
  }

});
/*
 * File: app/view/MainViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.MainViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.main'

});
/*
 * File: app/model/bs/Customer.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.bs.Customer', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    extraParams: {
      name: ''
    },
    url: '/api/bs/list',
    reader: {
      type: 'json',
      rootProperty: 'data'
    }
  },

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    },
    {
      name: 'taxid'
    },
    {
      name: 'address'
    },
    {
      name: 'accnumb'
    }
  ],

  toHtml: function() {
    return ['<i class="fa fa-users"></i>', this.get('name')].join(' ');
  }

});
/*
 * File: app/model/folder/Base.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.folder.Base', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/folder'
  },

  fields: [
    {
      name: 'name'
    },
    {
      name: 'category'
    },
    {
      calculate: function(data) {
        return true;
      },
      name: 'custom'
    },
    {
      name: 'folder_type'
    },
    {
      name: 'form'
    }
  ]
});
/*
 * File: app/model/folder/Document.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.folder.Document', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/folder/document',
    writer: {
      type: 'json',
      writeAllFields: true
    }
  },

  fields: [
    {
      name: 'folder_id'
    },
    {
      name: 'doc_id'
    }
  ]
});
/*
 * File: app/model/folder/Standard.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.folder.Standard', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/folder/standard'
  },

  fields: [
    {
      name: 'name'
    },
    {
      name: 'category'
    },
    {
      name: 'id'
    },
    {
      name: 'count'
    }
  ]
});
/*
 * File: app/model/document/Base.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.document.Base', {
  extend: 'Ext.data.Model',

  uses: [
    'Tel100.model.document.Type'
  ],

  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/documents/base'
  },

  fields: [
    {
      type: 'date',
      name: 'docdate'
    },
    {
      type: 'date',
      name: 'original_date'
    },
    {
      type: 'date',
      name: 'due_date'
    },
    {
      name: 'my_status'
    },
    {
      name: 'type',
      reference: 'Tel100.model.document.Type'
    },
    {
      calculate: function(data) {
        if (data.type) {
          var type = data.type;
          if (type.name) {
            return type.name;
          } else if (type.get) {
            return type.get('name');
          }
        }
      },
      name: 'typeName'
    },
    {
      name: 'my_role'
    },
    {
      calculate: function(data) {
        return helpers.document.status.statusFormatted(data.my_status, data.my_role, {
          isMotion: false,
          isNew: data.is_new,
          isChanged: data.is_changed
        });
      },
      name: 'myStatusName'
    },
    {
      name: 'is_new'
    },
    {
      name: 'is_changed'
    },
    {
      calculate: function(data) {
        return helpers.document.status.statusFormatted(data.status);
      },
      name: 'statusName'
    },
    {
      name: 'status'
    },
    {
      name: 'direction'
    },
    {
      calculate: function(data) {
        return i18n.document.base.directions[data.direction];
      },
      name: 'directionName'
    }
  ]
});
/*
 * File: app/model/document/Comment.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.document.Comment', {
  extend: 'Ext.data.Model',


  fields: [
    {
      type: 'date',
      name: 'created_at'
    }
  ]
});
/*
 * File: app/model/document/Direction.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.document.Direction', {
  extend: 'Ext.data.Model',


  fields: [
    {
      name: 'id'
    },
    {
      calculate: function(data) {
        return i18n.document.base.directions[data.id];
      },
      name: 'name'
    }
  ]
});
/*
 * File: app/model/document/File.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.document.File', {
  extend: 'Ext.data.Model',


  fields: [
    {
      type: 'date',
      name: 'created_at'
    }
  ]
});
/*
 * File: app/model/document/Motion.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.document.Motion', {
  extend: 'Ext.data.Model',


  fields: [
    {
      name: 'receiver'
    },
    {
      name: 'receiver_user'
    },
    {
      calculate: function(data) {
        var receiver = data.receiver;
        if (receiver) {
          return receiver.name || ( receiver.first_name + ' ' + receiver.last_name );
        }
      },
      name: 'receiverName'
    },
    {
      name: 'sender'
    },
    {
      name: 'sender_user'
    },
    {
      calculate: function(data) {
        var sender = data.sender;
        if (typeof sender === 'string') {
          return sender;
        } else if (sender) {
          return sender.name || ( sender.first_name + ' ' + sender.last_name );
        }
      },
      name: 'senderName'
    },
    {
      type: 'date',
      name: 'due_date'
    },
    {
      type: 'date',
      name: 'created_at'
    },
    {
      type: 'date',
      name: 'sent_at'
    },
    {
      type: 'date',
      name: 'received_at'
    },
    {
      type: 'date',
      name: 'completed_at'
    },
    {
      type: 'date',
      name: 'updated_at'
    },
    {
      name: 'status'
    },
    {
      calculate: function(data) {
        return helpers.document.status.motionStatusFull(data.status, data);
      },
      name: 'statusFull'
    }
  ],

  proxy: {
    type: 'rest',
    url: '/api/documents/motion'
  }
});
/*
 * File: app/model/document/ResponseType.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.document.ResponseType', {
  extend: 'Ext.data.Model'
});
/*
 * File: app/model/document/Type.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.document.Type', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/documents/types'
  }
});
/*
 * File: app/model/hr/Employee.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.hr.Employee', {
  extend: 'Ext.data.TreeModel',

  entityName: 'hr.Employee',
  fields: [
    {
      name: 'user_id'
    },
    {
      name: 'first_name'
    },
    {
      name: 'last_name'
    },
    {
      calculate: function(data) {
            return !!data.user_id;
        },
      name: 'has_user'
    },
    {
      calculate: function(data) {
            return data.first_name + ' ' + data.last_name;
        },
      name: 'full_name'
    },
    {
      calculate: function(data) {
            return data.first_name + ' ' + data.last_name;
        },
      name: 'name'
    },
    {
      name: 'vacation'
    },
    {
      calculate: function(data){
       return !!data.vacation;
      },
      name: 'on_vacation'
    },
    {
      name: 'vac_text'
    },
    {
      name: 'sub_id'
    },
    {
      name: 'sub_name'
    }
  ],

  toHtml: function() {
    if(this.get('on_vacation')) {
      return helpers.party.vacationDecorations(this);
    } else  if (this.get('has_user')) {
      return '<span class="text-success"><i class="fa fa-user"></i> '+ this.get('full_name') +'</span>';
    } else {
      return '<span class="text-muted"><i class="fa fa-user"></i> ' + this.get('full_name') + '</span>';
    }
  }
});
/*
 * File: app/model/hr/Organization.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.hr.Organization', {
  extend: 'Ext.data.TreeModel',

  entityName: 'hr.Organization',

  toHtml: function() {
    return ['<span class="text-muted"><i class="fa fa-bank"></i></span>', this.get('name')].join(' ');
  }

});
/*
 * File: app/model/hr/Party.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.hr.Party', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    extraParams: {
      name: ''
    },
    url: '/api/hr/party/list',
    reader: {
      type: 'json',
      rootProperty: 'data'
    }
  },

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name_ka'
    },
    {
      name: 'address_ka'
    },
    {
      name: 'contact_ka'
    },
    {
      name: 'identity'
    },
    {
      name: 'phones'
    },
    {
      name: 'email'
    },
    {
      name: 'ext_type'
    }
  ],

  toHtml: function() {
    return ['<i class="fa fa-building"></i>', this.get('name_ka')].join(' ');
  }

});
/*
 * File: app/model/party/Favourites.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.party.Favourites', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/party/favourites'
  },

  fields: [
    {
      name: 'id'
    },
    {
      name: 'person_id'
    },
    {
      name: 'person_type'
    },
    {
      name: 'name'
    },
    {
      calculate: function(data) {
        return helpers.party.convertTypeToExt(data.person_type);
      },
      name: 'ext_type'
    }
  ],

  toHtml: function() {
    return this.get('name');
  }

});
/*
 * File: app/view/admin/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.Panel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.adminpanel',


  controller: 'adminpanel',
  viewModel: {
    type: 'adminpanel'
  },
  layout: 'border',

  items: [
    {
      xtype: 'adminactionspanel',
      collapsible: true,
      region: 'west',
      split: true,
      listeners: {
        actionselected: 'onActionSelected'
      }
    },
    {
      xtype: 'container',
      region: 'center',
      itemId: 'center-panel',
      layout: {
        type: 'card',
        deferredRender: true
      },
      items: [
        {
          xtype: 'container',
          layout: {
            type: 'hbox',
            align: 'middle',
            pack: 'center'
          },
          items: [
            {
              xtype: 'label',
              bind: {
                text: '{i18n.admin.actions.selectAction}'
              }
            }
          ]
        },
        {
          xtype: 'admintypesadminpanel',
          itemId: 'documents-types'
        },
        {
          xtype: 'adminusersadminpanel',
          itemId: 'sys-users'
        }
      ]
    }
  ]

});
/*
 * File: app/view/admin/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.adminpanel',

  onActionSelected: function(category, name) {
    var centerPanel = this.getView().down('#center-panel');
    centerPanel.setActiveItem(category + '-' + name);
  }

});
/*
 * File: app/view/admin/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.adminpanel',

  data: {
    action: null
  }

});
/*
 * File: app/view/document/Main.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.Main', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentmain',


  controller: 'documentmain',
  viewModel: {
    type: 'documentmain'
  },
  layout: 'border',
  defaultListenerScope: true,

  items: [
    {
      xtype: 'documentfoldertab',
      width: 250,
      collapsible: true,
      region: 'west',
      split: true,
      listeners: {
        folderChosen: {
          fn: 'onTabpanelFolderChosen',
          scope: 'controller'
        },
        foldersrefresh: {
          fn: 'onFoldersRefresh',
          scope: 'controller'
        }
      }
    },
    {
      xtype: 'tabpanel',
      region: 'center',
      border: false,
      itemId: 'documentTabs',
      activeTab: 0,
      items: [
        {
          xtype: 'panel',
          dockedItems: [
            {
              xtype: 'toolbar',
              dock: 'top',
              items: [
                {
                  handler: 'onRefresh',
                  bind: {
                    text: '{i18n.document.base.ui.refresh}'
                  }
                },
                {
                  handler: 'onNewDocument',
                  cls: 'success-button',
                  bind: {
                    text: '{i18n.document.base.ui.newDocument}'
                  }
                },
                '->',
                {
                  handler: 'onDeleteDraft',
                  cls: 'danger-button',
                  bind: {
                    text: '{i18n.document.base.ui.deleteDraft}',
                    disabled: '{deleteDraftButtonDisabled}'
                  }
                }
              ]
            }
          ],
          border: false,
          layout: 'fit',
          bind: {
            title: '{i18n.document.base.ui.documents}'
          },
          items: [
            {
              xtype: 'documentgridpanel',
              bind: {
                selection: '{selection}'
              },
              listeners: {
                documentopen: 'onGridpanelDocumentopen',
                documentsign: 'onGridpanelDocumentsign',
                documentauthor: 'onGridpanelDocumentauthor'
              }
            }
          ]
        }
      ]
    }
  ],
  listeners: {
    beforerender: 'onPanelBeforeRender'
  },

  onGridpanelDocumentopen: function(doc) {
    this.getController().openDocument(doc);
  },

  onGridpanelDocumentsign: function(doc) {
    var view = this;
    var dialog = Ext.create('Tel100.view.document.comment.Sign', { modal: true });
    dialog.getViewModel().set('document', doc);
    dialog.on('signed', function() {
      view.onRefresh();
    });
    dialog.show();
  },

  onGridpanelDocumentauthor: function(doc) {
    var view = this;
    var dialog = Ext.create('Tel100.view.document.comment.Author', { modal: true });
    dialog.getViewModel().set('document', doc);
    dialog.on('authored', function() {
      view.onRefresh();
    });
    dialog.show();
  },

  onPanelBeforeRender: function(component, eOpts) {
    var view = this;
    var search = this.down('documentfoldersearch');
    search.on('searchstart', function(url, params) {
      view.down('documentgridpanel').getController().setStoreConfig({url: url, extraParams: params });
      view.down('documentgridpanel').refresh();
    });
  },

  onNewDocument: function() {
    this.getController().onNewDocument();
  },

  onRefresh: function() {
    this.getController().onRefresh();
    this.down('documentfoldertab').fireEvent('documentgridrefresh');
  },

  onDeleteDraft: function() {
    this.getController().onDeleteDraft();
  }

});
/*
 * File: app/view/document/MainViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.MainViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmain',

  onRefresh: function(opts) {
    if (opts && opts.$className) { opts = null; }
    var grid = this.getView().down('documentgridpanel');
    grid.refresh(opts);
  },

  onDeleteDraft: function() {
    var viewModel = this.getViewModel();
    var customfolderselection = viewModel.get('customfolderselection');
    var selection = viewModel.get('selection');
    if (customfolderselection){
      this.deleteFromCustom(customfolderselection[0].id, selection.id);
      this.onRefresh();
    } else {
      if (selection) {
        var status = selection.get('status');
        if (status === helpers.document.status.DRAFT) {
          var msg = i18n.document.base.ui.confirmDeleteDraft;
          var title = i18n.ui.confirmTitle;
          Ext.Msg.confirm(title, msg, function(resp) {
            if (resp === 'yes') {
              helpers.api.document.base.deleteDraft(selection.id, {
                success: this.onRefresh.bind(this)
              });
            }
          }.bind(this));
        }
      }
    }
  },

  onNewDocument: function() {
    // var grid = this.getView().down('documentgridpanel');
    helpers.api.document.base.createDraft({
      success: function(data) {
        this.onRefresh();
        var doc = Ext.create('Tel100.model.document.Base', data);
        this.getViewModel().set('selection', doc);
        this.openDocument(doc);
      }.bind(this)
    });
  },

  openDocument: function(doc) {
    // checking if the document is already open
    var tabs = this.getView().down('#documentTabs');
    var items = tabs.items;
    for (var i = 0; i < items.length; i++) {
      var item = items.getAt(i);
      var vm = item.getViewModel();
      var tabDoc = vm && vm.get('document');
      if (tabDoc && tabDoc.id === doc.id) {
        tabs.setActiveTab(item);
        return;
      }
    }

    // loading document for edit
    doc.load({
      success: function(document) {
        var isDraft = document.get('status') === helpers.document.status.DRAFT;
        if (isDraft) {
          this.openDraftDocument(tabs, document);
        } else {
          this.openCurrentDocument(tabs, document);
        }
      }.bind(this)
    });
  },

  openDraftDocument: function(tabs, document) {
    var title = i18n.document.base.ui.editDraftTitle;
    var editor = Tel100.view.document.editor.Creator.create({ title: title, closable: true });
    editor.setDocument(document);
    editor.on('documentsent', function(document) {
      tabs.remove(editor);
      this.onRefresh();
      // TODO: open viewer
    }.bind(this));
    tabs.add(editor);
    tabs.setActiveTab(editor);
  },

  openCurrentDocument: function(tabs, document) {
    var title = document.get('docnumber');
    var editor = Tel100.view.document.editor.Editor.create({ title: title, closable: true });
    editor.getViewModel().set('document', document);
    tabs.add(editor);
    tabs.setActiveTab(editor);
  },

  deleteFromCustom: function(folder_id, doc_id) {
            var opts = {};
            opts.method = 'DELETE';
            opts.url = '/api/folder/document';
            opts.params = { folder_id: folder_id, doc_id: doc_id };
            Ext.Ajax.request(opts);
  },

  onTabpanelFolderChosen: function(tabpanel) {
    this.getView().getComponent('documentTabs').setActiveTab(0);
  },

  onFoldersRefresh: function(tabpanel) {
    this.onRefresh();
  }

});
/*
 * File: app/view/document/MainViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.MainViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmain',


  data: {
    selection: null,
    customfolderselection: null
  },

  formulas: {
    deleteDraftButtonDisabled: function(get) {
      var selection = get('selection');
      if (this.getData().customfolderselection){
        return false;
      } else {
        if (selection) {
          var status = selection.get('status');
          return status !== helpers.document.status.DRAFT;
        } else {
          return true;
        }
      }
    }
  }

});
/*
 * File: app/view/document/Search.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.Search', {
  extend: 'Ext.window.Window',
  alias: 'widget.documentsearch',


  viewModel: {
    type: 'documentsearch'
  },
  height: 400,
  width: 800,
  layout: 'border',
  closeAction: 'hide',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.search.ui.search}'
  },
  items: [
    {
      xtype: 'documentfoldersearch',
      width: 300,
      title: '',
      titleCollapse: false,
      region: 'west',
      split: true
    },
    {
      xtype: 'documentgridpanel',
      region: 'center',
      listeners: {
        itemdblclick: 'onGridpanelItemDblClick'
      }
    }
  ],

  onGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
    var parent = this.getParentDocument();
    if (record.get('status') !== 0 && record.id !== parent.id) {
      this.fireEvent('documentselected', record);
      this.close();
    }
  },

  getParentDocument: function() {
    return this.getViewModel().get('document');
  },

  setParentDocument: function(doc) {
    this.getViewModel().set('document', doc);
  }

});
/*
 * File: app/view/document/SearchViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.SearchViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentsearch'
});
/*
 * File: app/view/document/SearchViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.SearchViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentsearch'

});
/*
 * File: app/view/modules/Admin.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.Admin', {
  extend: 'Ext.container.Container',
  alias: 'widget.modulesadmin',


  viewModel: {
    type: 'modulesadmin'
  },
  layout: 'fit',

  items: [
    {
      xtype: 'adminpanel'
    }
  ]

});
/*
 * File: app/view/modules/AdminViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.AdminViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.modulesadmin'
});
/*
 * File: app/view/modules/AdminViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.AdminViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.modulesadmin'

});
/*
 * File: app/view/modules/Documents.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.Documents', {
  extend: 'Ext.container.Container',
  alias: 'widget.modulesdocuments',


  viewModel: {
    type: 'modulesdocuments'
  },
  layout: 'fit',

  items: [
    {
      xtype: 'documentmain',
      border: false
    }
  ]

});
/*
 * File: app/view/modules/DocumentsViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.DocumentsViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.modulesdocuments'
});
/*
 * File: app/view/modules/DocumentsViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.DocumentsViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.modulesdocuments'

});
Ext.define('Tel100.view.modules.HR', {
  extend: 'Ext.container.Container',
  alias: 'widget.moduleshr',

  controller: 'moduleshr',
  layout: 'fit',
  viewModel: {
    type: 'moduleshr'
  },

  items: [{
    xtype: 'tabpanel',
    activeTab: 0,
    layout: 'fit',
    items: [{
      xtype: 'panel',
      bind: { title: '{i18n.vacation.ui.title}' },
      dockedItems: [{
        xtype: 'toolbar',
        dock: 'top',
        items: [{
          xtype: 'button',
          bind: { text: '{i18n.vacation.ui.button}' },
          listeners: { click: 'onButtonClick' }
        }]
      }],
      items: [{
        xtype: 'gridpanel',
        title: 'ისტორია',
        bind: { store: '{vacationlist}' },
        columns: [{
          xtype: 'datecolumn',
          dataIndex: 'from_date',
          flex: 2,
          format: 'd/m/Y',
          bind: {
            text: '{i18n.vacation.fields.from}'
          }
        },
        {
          xtype: 'datecolumn',
          dataIndex: 'to_date',
          flex: 2,
          format: 'd/m/Y',
          bind: {
            text: '{i18n.vacation.fields.to}'
          }
        },
        {
          xtype: 'gridcolumn',
          dataIndex: 'type_name',
          flex: 10,
          bind: {
            text: '{i18n.vacation.fields.type}'
          }
        },
        {
          xtype: 'gridcolumn',
          dataIndex: 'full_name',
          flex: 10,
          bind: {
            text: '{i18n.vacation.fields.substitude}'
          }
        }]
      }]
    }, {
      xtype: 'panel',
      layout: 'fit',
      title: 'HR Structure',
      items: [{
        xtype: 'hrtreepanel'
      }]
    }
  ]}
]});
/*
 * File: app/view/modules/HRViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.HRViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.moduleshr',

  onButtonClick: function(button, e, eOpts) {
    var vacationwindow = Ext.create('Tel100.view.hr.vacation.Window');
    vacationwindow.show();
  }

});
/*
 * File: app/view/modules/HRViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.modules.HRViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.moduleshr',


  stores: {
    vacationlist: {
      autoLoad: true,
      proxy: {
        type: 'rest',
        url: '/api/vacation/list'
      },
      fields: [
        {
          name: 'id'
        },
        {
          name: 'from_date'
        },
        {
          name: 'to_date'
        },
        {
          name: 'full_name'
        },
        {
          name: 'type_name'
        }
      ]
    }
  }

});
/*
 * File: app/view/party/Favourites.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.party.Favourites', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.partyfavourites',


  controller: 'partyfavourites',
  viewModel: {
    type: 'partyfavourites'
  },
  defaultListenerScope: true,

  bind: {
    title: '{i18n.hr.favourites.title}',
    store: '{favourites}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.party.favouriteDecoration(value, record);
      },
      draggable: false,
      resizable: false,
      dataIndex: 'name',
      hideable: false,
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.name}'
      }
    }
  ],
  listeners: {
    afterrender: 'onGridpanelAfterRender'
  },

  onGridpanelAfterRender: function(component, eOpts) {
    component.addDocked(new Ext.PagingToolbar({
          displayInfo: true,
          dock: 'bottom',
          afterPageText: ' / {0}',
          beforePageText: i18n.ui.page,
          emptyMsg: i18n.ui.emptyMsg,
          displayMsg : i18n.ui.displayMsg,
          bind: {
            store: '{favourites}'
          }
        }));
  },

  onStoreBeforeLoad: function(store, operation, eOpts) {
    var ps = this.up('partyselector');
    var vm = ps.getViewModel();
    var pr = store.getProxy();
    pr.setExtraParams({hideHR: vm.get('hideHR'), hideParty: vm.get('hideParty'), hideCustomers: vm.get('hideCustomers')});
  }

});
/*
 * File: app/view/party/FavouritesViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.party.FavouritesViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.partyfavourites',

  onStoreBeforeLoad: function(store, operation, eOpts) {

  }

});
/*
 * File: app/view/party/FavouritesViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.party.FavouritesViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.partyfavourites',


  stores: {
    favourites: {
      autoLoad: true,
      model: 'Tel100.model.party.Favourites',
      listeners: {
        beforeload: 'onStoreBeforeLoad'
      }
    }
  }

});
/*
 * File: app/view/party/Selector.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.party.Selector', {
  extend: 'Ext.window.Window',
  alias: 'widget.partyselector',


  controller: 'partyselector',
  viewModel: {
    type: 'partyselector'
  },
  height: 500,
  width: 950,
  autoDestroy: false,
  closeAction: 'hide',
  title: 'Select Party',
  maximizable: true,
  modal: true,
  defaultListenerScope: true,

  layout: {
    type: 'hbox',
    align: 'stretch'
  },
  items: [
    {
      xtype: 'tabpanel',
      flex: 1,
      activeTab: 1,
      items: [
        {
          xtype: 'partyfavourites',
          listeners: {
            beforeitemcontextmenu: {
              fn: 'onFavouritesBeforeItemContextMenu',
              scope: 'controller'
            },
            celldblclick: 'onFavouritesCellDblClick'
          }
        },
        {
          xtype: 'hrtreepanel',
          cls: 'panel-with-border',
          listeners: {
            celldblclick: 'onHRTreeDblClick',
            beforeitemcontextmenu: {
              fn: 'onHRStructureBeforeItemContextMenu',
              scope: 'controller'
            }
          },
          tabConfig: {
            xtype: 'tab',
            bind: {
              hidden: '{hideHR}'
            }
          }
        },
        {
          xtype: 'hrpartygrid',
          tabConfig: {
            xtype: 'tab',
            bind: {
              hidden: '{hideParty}'
            }
          },
          listeners: {
            itemdblclick: 'onPartyGridpanelItemDblClick',
            beforeitemcontextmenu: {
              fn: 'onPartiesBeforeItemContextMenu',
              scope: 'controller'
            }
          }
        },
        {
          xtype: 'bscustomerpanel',
          tabConfig: {
            xtype: 'tab',
            bind: {
              hidden: '{hideCustomers}'
            }
          },
          listeners: {
            itemdblclick: 'onCustomerGridpanelItemDblClick',
            beforeitemcontextmenu: {
              fn: 'onCustomerBeforeItemContextMenu',
              scope: 'controller'
            }
          }
        }
      ]
    },
    {
      xtype: 'splitter',
      width: 5
    },
    {
      xtype: 'gridpanel',
      cls: 'panel-with-border',
      itemId: 'selectedParties',
      width: 300,
      bodyBorder: true,
      hideHeaders: true,
      bind: {
        title: '{i18n.selector.selectedParties}',
        store: '{parties}'
      },
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            if(record.toHtml){
              return record.toHtml();
            }
          },
          dataIndex: 'name',
          text: 'Name',
          flex: 1
        }
      ],
      listeners: {
        celldblclick: 'onSelectedPartiesCellDblClick'
      },
      tools: [
        {
          xtype: 'tool',
          type: 'minus',
          listeners: {
            click: 'onRemoveToolClick'
          }
        }
      ]
    }
  ],
  dockedItems: [
    {
      xtype: 'toolbar',
      flex: 1,
      dock: 'bottom',
      items: [
        {
          xtype: 'button',
          bind: {
            text: '{i18n.ui.cancel}'
          },
          listeners: {
            click: 'onCancelClick'
          }
        },
        {
          xtype: 'tbspacer',
          flex: 1
        },
        {
          xtype: 'button',
          bind: {
            text: '{i18n.selector.selectorConfirm}'
          },
          listeners: {
            click: 'onSelectClicked'
          }
        }
      ]
    }
  ],

  onFavouritesCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    this.getController().addFromFavourites(record);
  },

  onHRTreeDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    this.getController().onAddParty(record);
  },

  onPartyGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
       if (record.get('ext_type') === 'hr.Party') {
              this.getController().onAddParty(record);
       }
  },

  onCustomerGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
    if (record.get('ext_type') === 'bs.Customer') {
          this.getController().onAddParty(record);
    }
  },

  onCancelClick: function(button, e, eOpts) {
    this.close();
  },

  onSelectClicked: function(button, e, eOpts) {
    var data = [];
    var grid = this.down('#selectedParties');
    var store = grid.getStore();
    store.each(function(item) { data.push(item); });
    this.fireEvent('selectioncomplete', data);
    store.removeAll();
    this.close();
  },

  onSelectedPartiesCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    this.getController().onRemoveParty(record);
  },

  onRemoveToolClick: function(tool, e, owner, eOpts) {
    var grid = this.down('#selectedParties');
    var selection = grid.getSelection();
    if (selection.length > 0) {
      this.getController().onRemoveParty(selection[0]);
    }
  }

});
/*
 * File: app/view/party/SelectorViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.party.SelectorViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.partyselector',

  onAddParty: function(obj) {
    var grid = this.getView().getComponent('selectedParties');
    grid.getStore().add(obj);
  },

  onRemoveParty: function(obj) {
    var grid = this.getView().getComponent('selectedParties');
    var store = grid.getStore();
    store.remove(obj);
  },

  contextMenu: function(dataview, record, item, index, e) {
    var me = this;
    var favMenu = Ext.create('Ext.menu.Menu', {
        items: [{
          text: i18n.hr.favourites.add_to,
          icon: '/images/add.png',
          handler: function(item){
            var model = Ext.create('Tel100.model.party.Favourites',
                                    { person_id: record.id, person_type: record.get('ext_type') });
            model.save();
            var favpanel = Ext.ComponentQuery.query('partyfavourites')[0];
            var store = favpanel.store;
            store.reload();
          }
        }]
      });

      e.stopEvent();
      favMenu.showAt(e.getXY());
  },

  addFromFavourites: function(record) {
    var obj = Ext.create('Tel100.model.party.Favourites',
                        { id: record.get('person_id'),
                         name: record.get('name'),
                         person_type: record.get('person_type') });
    this.onAddParty(obj);
  },

  onFavouritesBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    var rec = record;
    var favMenu = Ext.create('Ext.menu.Menu', {
      items: [{
        text: i18n.hr.favourites.delete,
        icon: '/images/delete.png',
        handler: function(item){
          var favpanel = Ext.ComponentQuery.query('partyfavourites')[0];
          var store = favpanel.store;
          var selection = favpanel.selection;
          if (selection){
            Ext.Msg.show({
              title: i18n.ui.destroy,
              message: i18n.ui.destroyConfirm,
              buttons: Ext.Msg.YESNO,
              icon: Ext.Msg.QUESTION,
              fn: function(btn) {
                if (btn === 'yes') {
                  store.remove(selection);
                  store.sync();
                  store.reload();
                }
              }
            });
          }
        }
      }]
    });

    e.stopEvent();
    favMenu.showAt(e.getXY());
  },

  onHRStructureBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    if(record.get('ext_type') == 'hr.Employee'){
      this.contextMenu(dataview, record, item, index, e);
    }
  },

  onPartiesBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    this.contextMenu(dataview, record, item, index, e);
  },

  onCustomerBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    this.contextMenu(dataview, record, item, index, e);
  }

});
/*
 * File: app/view/party/SelectorViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.party.SelectorViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.partyselector',


  stores: {
    parties: {

    }
  }

});
/*
 * File: app/view/workarea/LocaleSelector.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.workarea.LocaleSelector', {
  extend: 'Ext.button.Segmented',
  alias: 'widget.workarealocaleselector',


  controller: 'workarealocaleselector',
  viewModel: {
    type: 'workarealocaleselector'
  },

  items: [
    {
      itemId: 'i18nka',
      text: 'ქართული'
    },
    {
      itemId: 'i18nru',
      text: 'Русский'
    }
  ],
  listeners: {
    afterrender: 'onSegmentedbuttonAfterRender',
    toggle: 'onSegmentedbuttonToggle'
  }

});
/*
 * File: app/view/workarea/LocaleSelectorViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.workarea.LocaleSelectorViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.workarealocaleselector',

  onSegmentedbuttonAfterRender: function(component, eOpts) {
    var btnId = '#i18n' + helpers.i18n.getCurrentLocale();
    this.getView().down(btnId).toggle();
  },

  onSegmentedbuttonToggle: function(segmentedbutton, button, isPressed, eOpts) {
    var btnId = button.getItemId();
    var newLocale = button.getItemId().substr(4);
    var oldLocale = helpers.i18n.getCurrentLocale();
    if (newLocale != oldLocale) {
      helpers.i18n.setCurrentLocale(newLocale);
      var i18n =  window[newLocale];
      this.getView().up('#main-viewport').getViewModel().set('i18n', i18n);
      window.i18n = i18n;
    }
  }

});
/*
 * File: app/view/workarea/LocaleSelectorViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.workarea.LocaleSelectorViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.workarealocaleselector'

});
/*
 * File: app/view/workarea/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.workarea.Panel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.workareapanel',


  controller: 'workareapanel',
  viewModel: {
    type: 'workareapanel'
  },
  border: false,
  layout: 'border',

  items: [
    {
      xtype: 'container',
      region: 'north',
      padding: 4,
      layout: {
        type: 'hbox',
        align: 'stretch'
      },
      items: [
        {
          xtype: 'segmentedbutton',
          items: [
            {
              itemId: 'docs',
              text: 'docs'
            },
            {
              itemId: 'hr',
              text: 'hr'
            },
            {
              itemId: 'admin',
              text: 'admin'
            }
          ],
          listeners: {
            toggle: 'onToggle'
          }
        },
        {
          xtype: 'tbspacer',
          flex: 1
        },
        {
          xtype: 'userboxbutton'
        }
      ]
    },
    {
      xtype: 'container',
      region: 'center',
      itemId: 'body-layout',
      layout: {
        type: 'card',
        deferredRender: true
      },
      items: [
        {
          xtype: 'modulesdocuments',
          border: 0,
          itemId: 'docs'
        },
        {
          xtype: 'moduleshr',
          itemId: 'hr'
        },
        {
          xtype: 'modulesadmin',
          itemId: 'admin'
        }
      ]
    }
  ],
  listeners: {
    beforerender: 'onBeforeRender'
  }

});
/*
 * File: app/view/workarea/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.workarea.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.workareapanel',

  setCurrentApplication: function(name, opts) {
    if (opts && opts.toggleButton) {
      var applicationButton = this.getView().down('#' + name);
      applicationButton.toggle();
    }
    if (opts && opts.switchApplication) {
      var modulesContainer = this.getView().down('#body-layout');
      modulesContainer.setActiveItem(name);
    }
    helpers.preferences.setValue('current-application', name);
  },

  onToggle: function(segmentedbutton, button, isPressed, eOpts) {
    this.setCurrentApplication(button.itemId, { switchApplication: true });
  },

  onBeforeRender: function(component, eOpts) {
    var currApplication = helpers.preferences.getValue('current-application', 'docs');
    this.setCurrentApplication(currApplication, { toggleButton: true, switchApplication: true });
  }

});
/*
 * File: app/view/workarea/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.workarea.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.workareapanel'

});
/*
 * File: app/model/hr/vacation/Type.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.hr.vacation.Type', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/vacation/types'
  }
});
/*
 * File: app/model/hr/vacation/Vacation.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.model.hr.vacation.Vacation', {
  extend: 'Ext.data.Model',


  schema: 'tel100',

  proxy: {
    type: 'rest',
    url: '/api/vacation'
  }
});
/*
 * File: app/view/admin/actions/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.actions.Panel', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.adminactionspanel',


  controller: 'adminactionspanel',
  viewModel: {
    type: 'adminactionspanel'
  },
  width: 200,
  hideHeaders: true,

  bind: {
    title: '{i18n.admin.actions.title}',
    store: '{actions}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var category = record.get('category');
        var name = record.get('name');
        return i18n.admin[category][name];
      },
      dataIndex: 'name',
      text: 'String',
      flex: 1
    }
  ],
  features: [
    {
      ftype: 'grouping',
      groupByText: 'category',
      groupHeaderTpl: Ext.create('Ext.XTemplate', 
        '{name:this.categoryName}',
        {
          categoryName: function(name) {
            return i18n.admin[name].title;
          }
        }
      )
    }
  ],
  listeners: {
    selectionchange: 'onActionChange'
  }

});
/*
 * File: app/view/admin/actions/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.actions.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.adminactionspanel',

  onActionChange: function(model, selected, eOpts) {
    var selection = selected[0];
    if (selection) {
      var category = selection.get('category');
      var name = selection.get('name');
      this.getView().fireEvent('actionselected', category, name);
    }
  }

});
/*
 * File: app/view/admin/actions/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.actions.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.adminactionspanel',


  stores: {
    actions: {
      groupField: 'category',
      data: [
        {
          category: 'documents',
          name: 'types'
        },
        {
          category: 'sys',
          name: 'users'
        }
      ],
      fields: [
        {
          name: 'name'
        },
        {
          name: 'category'
        }
      ]
    }
  }

});
/*
 * File: app/view/admin/types/AdminPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.types.AdminPanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.admintypesadminpanel',


  viewModel: {
    type: 'admintypesadminpanel'
  },
  layout: 'border',

  items: [
    {
      xtype: 'admintypesgridpanel',
      region: 'west',
      split: true
    }
  ]

});
/*
 * File: app/view/admin/types/AdminPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.types.AdminPanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.admintypesadminpanel'
});
/*
 * File: app/view/admin/types/AdminPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.types.AdminPanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.admintypesadminpanel'

});
/*
 * File: app/view/admin/users/AdminPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.users.AdminPanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.adminusersadminpanel',


  viewModel: {
    type: 'adminusersadminpanel'
  },
  title: 'users'

});
/*
 * File: app/view/admin/users/AdminPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.users.AdminPanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.adminusersadminpanel'
});
/*
 * File: app/view/admin/users/AdminPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.users.AdminPanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.adminusersadminpanel'

});
/*
 * File: app/view/bs/customer/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.bs.customer.Panel', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.bscustomerpanel',


  controller: 'bscustomerpanel',
  viewModel: {
    type: 'bscustomerpanel'
  },
  defaultListenerScope: true,

  bind: {
    title: '{i18n.hr.customer.title}',
    store: '{customer}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      dataIndex: 'name',
      flex: 3,
      bind: {
        text: '{i18n.hr.party.fields.name}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'address',
      flex: 3,
      bind: {
        text: '{i18n.hr.party.fields.address}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'taxid',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.identity}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'accnumb',
      bind: {
        text: '{i18n.hr.customer.fields.accnumb}'
      }
    }
  ],
  dockedItems: [
    {
      xtype: 'form',
      dock: 'bottom',
      width: 100,
      defaults: {
        anchor: '100%'
      },
      header: false,
      title: 'My Form',
      fieldDefaults: {
        labelAlign: 'right'
      },
      layout: {
        type: 'hbox',
        align: 'stretch'
      },
      items: [
        {
          xtype: 'container',
          flex: 1,
          layout: 'form',
          items: [
            {
              xtype: 'textfield',
              name: 'name',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.name}'
              }
            },
            {
              xtype: 'textfield',
              name: 'taxid',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.identity}'
              }
            },
            {
              xtype: 'textfield',
              name: 'address',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.address}'
              }
            },
            {
              xtype: 'textfield',
              name: 'accnumb',
              bind: {
                fieldLabel: '{i18n.hr.customer.fields.accnumb}'
              }
            }
          ]
        },
        {
          xtype: 'container',
          layout: {
            type: 'vbox',
            align: 'stretch',
            padding: 5
          },
          items: [
            {
              xtype: 'button',
              flex: 1,
              bind: {
                text: '{i18n.document.search.ui.search}'
              },
              listeners: {
                click: {
                  fn: 'onButtonClick',
                  scope: 'controller'
                }
              }
            }
          ]
        }
      ]
    }
  ],
  listeners: {
    resize: {
      fn: 'onGridpanelResize',
      scope: 'controller'
    },
    afterrender: 'onGridpanelAfterRender'
  },

  onGridpanelAfterRender: function(component, eOpts) {
    component.addDocked(new Ext.PagingToolbar({
      displayInfo: true,
      dock: 'bottom',
      afterPageText: ' / {0}',
      beforePageText: i18n.ui.page,
      emptyMsg: i18n.ui.emptyMsg,
      displayMsg : i18n.ui.displayMsg,
      bind: {
        store: '{customer}'
      }
    }));
  }

});
/*
 * File: app/view/bs/customer/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.bs.customer.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.bscustomerpanel',

  onButtonClick: function(button, e, eOpts) {
    var form = this.getView().down('form');
    var params = form.getValues();
    this.getStore('customer').getProxy().setExtraParams(params);

    //this.getStore('customer').load({ params: form.getValues() });
    var st = this.getStore('customer');
    st.removeAll();
    st.currentPage = 1;
    this.getStore('customer').load();
  },

  onGridpanelResize: function(component, width, height, oldWidth, oldHeight, eOpts) {

  }

});
/*
 * File: app/view/bs/customer/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.bs.customer.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.bscustomerpanel',


  stores: {
    customer: {
      pageSize: 10,
      model: 'Tel100.model.bs.Customer'
    }
  }

});
/*
 * File: app/view/document/comment/Author.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.Author', {
  extend: 'Ext.window.Window',
  alias: 'widget.documentcommentauthor',


  viewModel: {
    type: 'documentcommentauthor'
  },
  height: 250,
  width: 400,
  defaultListenerScope: true,

  layout: {
    type: 'vbox',
    align: 'stretch',
    padding: 5
  },
  bind: {
    title: '{i18n.document.comment.actions.author_document}'
  },
  items: [
    {
      xtype: 'segmentedbutton',
      items: [
        {
          itemId: 'sign',
          enableToggle: true,
          pressed: true,
          bind: {
            text: '{i18n.document.comment.actions.author_ok}'
          },
          listeners: {
            toggle: 'onSignToggle'
          }
        },
        {
          enableToggle: true,
          bind: {
            text: '{i18n.document.comment.actions.author_cancel}'
          }
        }
      ]
    },
    {
      xtype: 'textareafield',
      flex: 1,
      itemId: 'comment',
      labelAlign: 'top',
      bind: {
        fieldLabel: '{i18n.document.comment.text}',
        value: '{text}'
      }
    }
  ],
  dockedItems: [
    {
      xtype: 'toolbar',
      flex: 1,
      dock: 'bottom',
      items: [
        {
          xtype: 'button',
          bind: {
            text: '{i18n.ui.save}'
          },
          listeners: {
            click: 'onSaveButtonClick'
          }
        },
        {
          xtype: 'tbspacer',
          flex: 1
        },
        {
          xtype: 'button',
          bind: {
            text: '{i18n.ui.cancel}'
          },
          listeners: {
            click: 'onCancelButtonClick'
          }
        }
      ]
    }
  ],

  onSignToggle: function(button, pressed, eOpts) {
    var vm = this.getViewModel();
    vm.set('response_type', pressed ? helpers.api.document.responseType.complete : helpers.api.document.responseType.cancel);
  },

  onSaveButtonClick: function(button, e, eOpts) {
    var view = this;
    var vm = this.getViewModel();
    var text = vm.get('text');
    var response_type = vm.get('response_type');
    var document_id = vm.get('document.id');
    helpers.api.document.comment.author({
      params: {
        document_id: document_id,
        text: text,
        response_type: response_type
      },
      success: function() {
        view.fireEvent('authored');
        view.close();
      }
    });
  },

  onCancelButtonClick: function(button, e, eOpts) {
    this.close();
  }

});
/*
 * File: app/view/document/comment/AuthorViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.AuthorViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentcommentauthor'
});
/*
 * File: app/view/document/comment/AuthorViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.AuthorViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentcommentauthor',

  data: {
    response_type: helpers.api.document.responseType.complete,
    text: ''
  }

});
/*
 * File: app/view/document/comment/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.Panel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentcommentpanel',


  controller: 'documentcommentpanel',
  viewModel: {
    type: 'documentcommentpanel'
  },
  layout: 'fit',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.comment.panelTitle} ({commentCount})'
  },
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onToolClick'
      }
    }
  ],
  items: [
    {
      xtype: 'gridpanel',
      bind: {
        store: '{comments}'
      },
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            var new_status = record.get('status');
            var old_status = record.get('old_status');
            if (new_status === old_status) {
              return '<i class="fa fa-comment text-muted"></i>';
            } else if (new_status > old_status) {
              return '<i class="fa fa-check"></i>';
            } else {
              return '<i class="fa fa-times"></i>';
            }
          },
          width: 32,
          sortable: false
        },
        {
          xtype: 'gridcolumn',
          width: 150,
          sortable: false,
          dataIndex: 'user',
          bind: {
            text: '{i18n.document.comment.author}'
          }
        },
        {
          xtype: 'gridcolumn',
          width: 200,
          sortable: false,
          dataIndex: 'text',
          bind: {
            text: '{i18n.document.comment.text}'
          }
        },
        {
          xtype: 'gridcolumn',
          width: 125,
          sortable: false,
          dataIndex: 'created_at',
          formatter: 'date("d/m/Y H:i")',
          bind: {
            text: '{i18n.document.comment.date}'
          }
        }
      ],
      viewConfig: {
        getRowClass: function(record, rowIndex, rowParams, store) {
          var new_status = record.get('status');
          var old_status = record.get('old_status');
          if (new_status === old_status) {
            return '';
          } else if (new_status > old_status) {
            return 'text-success';
          } else {
            return 'text-danger';
          }
        }
      }
    }
  ],

  onToolClick: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  refresh: function(callback) {
    this.down('gridpanel').getStore().load({
      scope: this,
      callback: callback
    });
  },

  onStoreLoad: function(store, records, successful, eOpts) {
    var vm = this.getViewModel();
    vm.set('commentCount', store.count());
  }

});
/*
 * File: app/view/document/comment/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentcommentpanel',

  onStoreLoad: function(store, records, successful, eOpts) {
    // DON'T DELETE THIS. SENCHA BUG: see actual method in view!
  }

});
/*
 * File: app/view/document/comment/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentcommentpanel',


  data: {
    commentCount: 0
  },

  stores: {
    comments: {
      autoLoad: true,
      model: 'Tel100.model.document.Comment',
      proxy: {
        type: 'ajax',
        extraParams: {
          document_id: '{document.id}'
        },
        url: '/api/documents/comments',
        reader: {
          type: 'json'
        }
      },
      listeners: {
        load: 'onStoreLoad'
      }
    }
  }

});
/*
 * File: app/view/document/comment/Sign.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.Sign', {
  extend: 'Ext.window.Window',
  alias: 'widget.documentcommentsign',


  viewModel: {
    type: 'documentcommentsign'
  },
  height: 250,
  width: 400,
  defaultListenerScope: true,

  layout: {
    type: 'vbox',
    align: 'stretch',
    padding: 5
  },
  bind: {
    title: '{i18n.document.comment.actions.sign_document}'
  },
  items: [
    {
      xtype: 'segmentedbutton',
      items: [
        {
          itemId: 'sign',
          enableToggle: true,
          pressed: true,
          bind: {
            text: '{i18n.document.comment.actions.sign_ok}'
          },
          listeners: {
            toggle: 'onSignToggle'
          }
        },
        {
          enableToggle: true,
          bind: {
            text: '{i18n.document.comment.actions.sign_cancel}'
          }
        }
      ]
    },
    {
      xtype: 'textareafield',
      flex: 1,
      itemId: 'comment',
      labelAlign: 'top',
      bind: {
        fieldLabel: '{i18n.document.comment.text}',
        value: '{text}'
      }
    }
  ],
  dockedItems: [
    {
      xtype: 'toolbar',
      flex: 1,
      dock: 'bottom',
      items: [
        {
          xtype: 'button',
          bind: {
            text: '{i18n.ui.save}'
          },
          listeners: {
            click: 'onSaveButtonClick'
          }
        },
        {
          xtype: 'tbspacer',
          flex: 1
        },
        {
          xtype: 'button',
          bind: {
            text: '{i18n.ui.cancel}'
          },
          listeners: {
            click: 'onCancelButtonClick'
          }
        }
      ]
    }
  ],

  onSignToggle: function(button, pressed, eOpts) {
    var vm = this.getViewModel();
    vm.set('response_type', pressed ? helpers.api.document.responseType.complete : helpers.api.document.responseType.cancel);
  },

  onSaveButtonClick: function(button, e, eOpts) {
    var view = this;
    var vm = this.getViewModel();
    var text = vm.get('text');
    var response_type = vm.get('response_type');
    var document_id = vm.get('document.id');
    helpers.api.document.comment.sign({
      params: {
        document_id: document_id,
        text: text,
        response_type: response_type
      },
      success: function() {
        view.fireEvent('signed');
        view.close();
      }
    });
  },

  onCancelButtonClick: function(button, e, eOpts) {
    this.close();
  }

});
/*
 * File: app/view/document/comment/SignViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.SignViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentcommentsign'
});
/*
 * File: app/view/document/comment/SignViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.comment.SignViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentcommentsign',

  data: {
    response_type: helpers.api.document.responseType.complete,
    text: ''
  }

});
/*
 * File: app/view/document/editor/Creator.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.Creator', {
  extend: 'Ext.container.Container',
  alias: 'widget.documenteditorcreator',


  controller: 'documenteditorcreator',
  viewModel: {
    type: 'documenteditorcreator'
  },
  border: false,
  layout: 'border',
  defaultListenerScope: true,

  listeners: {
    beforerender: {
      fn: 'onBeforeRender',
      scope: 'controller'
    },
    documentchange: {
      fn: 'onDocumentChange',
      buffer: 500,
      scope: 'controller'
    }
  },
  items: [
    {
      xtype: 'tabpanel',
      region: 'center',
      activeTab: 0,
      deferredRender: false,
      tabPosition: 'bottom',
      items: [
        {
          xtype: 'panel',
          border: false,
          layout: 'border',
          bodyBorder: false,
          bind: {
            title: '{i18n.document.base.ui.newDocumentTab}'
          },
          dockedItems: [
            {
              xtype: 'toolbar',
              region: 'north',
              dock: 'top',
              border: false,
              items: [
                {
                  xtype: 'button',
                  bind: {
                    disabled: '{sendButtonDisabled}',
                    text: '{i18n.document.base.ui.send}'
                  },
                  listeners: {
                    click: {
                      fn: 'onSendClick',
                      scope: 'controller'
                    }
                  }
                },
                {
                  xtype: 'button',
                  bind: {
                    disabled: '{saveButtonDisabled}',
                    text: '{saveButtonText}'
                  },
                  listeners: {
                    click: {
                      fn: 'onSaveClick',
                      scope: 'controller'
                    }
                  }
                },
                {
                  xtype: 'tbfill'
                }
              ]
            }
          ],
          items: [
            {
              xtype: 'container',
              flex: 1,
              region: 'center',
              baseCls: 'white-panel',
              border: false,
              layout: {
                type: 'vbox',
                align: 'stretch'
              },
              items: [
                {
                  xtype: 'textfield',
                  submitEmptyText: false,
                  padding: 5,
                  labelAlign: 'top',
                  emptyText: 'enter document\'s subject',
                  bind: {
                    fieldLabel: '{i18n.document.base.subject}',
                    value: '{document.subject}'
                  }
                },
                {
                  xtype: 'htmleditor',
                  flex: 1,
                  itemId: 'documentBody',
                  padding: '0 5 5 5',
                  labelAlign: 'top',
                  bind: {
                    fieldLabel: '{i18n.document.base.body}'
                  },
                  listeners: {
                    change: 'onHtmleditorChange'
                  }
                }
              ]
            },
            {
              xtype: 'container',
              region: 'east',
              split: true,
              border: false,
              width: 400,
              layout: {
                type: 'accordion',
                hideCollapseTool: true
              },
              items: [
                {
                  xtype: 'documenteditorgeneral',
                  bind: {
                    title: '{i18n.document.base.ui.generalTabTitle}'
                  }
                },
                {
                  xtype: 'documentrelationpanel',
                  itemId: 'relations'
                },
                {
                  xtype: 'documentmotionssigneepanel',
                  listeners: {
                    datachanged: 'onSigneesChanged'
                  }
                },
                {
                  xtype: 'documentmotionsassigneepanel',
                  listeners: {
                    datachanged: 'onAssigneeChange'
                  }
                },
                {
                  xtype: 'documentmotionsauthorpanel',
                  listeners: {
                    datachanged: 'onAuthorsChanged'
                  }
                },
                {
                  xtype: 'documentfilepanel',
                  itemId: 'files'
                }
              ]
            }
          ]
        },
        {
          xtype: 'panel',
          border: false,
          layout: 'fit',
          bodyBorder: false,
          bind: {
            title: '{i18n.document.base.ui.motionsTabTitle}'
          },
          items: [
            {
              xtype: 'documentmotionsoutpanel',
              border: false,
              bodyBorder: false,
              listeners: {
                draftmotionchanged: 'onDraftmotionChanged',
                datachanged: 'onReceiversChanged'
              }
            }
          ]
        }
      ]
    }
  ],

  onHtmleditorChange: function(field, newValue, oldValue, eOpts) {
    var view = field.up('documenteditorcreator');
    var vm = view.getViewModel();
    var document = vm.get('document');
    document.set('body', newValue);
  },

  onSigneesChanged: function(panel, operation, item) {
    this.down('documentmotionsoutpanel').refresh();
  },

  onAssigneeChange: function(panel, operation, item) {
    this.down('documentmotionsoutpanel').refresh();
  },

  onAuthorsChanged: function(panel, operation, item) {
    this.down('documentmotionsoutpanel').refresh();
  },

  onDraftmotionChanged: function(hasDraftMotion) {
    var vm = this.getViewModel();
    vm.set('hasDraftMotion', hasDraftMotion);
  },

  onReceiversChanged: function(panel, operation, item) {
    var signeesPanel = this.down('documentmotionssigneepanel');
    var assigneesPanel = this.down('documentmotionsassigneepanel');
    var authorPanel = this.down('documentmotionsauthorpanel');
    signeesPanel.refresh();
    assigneesPanel.refresh();
    authorPanel.refresh();
  },

  setDocument: function(doc) {
    var bodyText = this.down('#documentBody');
    var vm = this.getViewModel();
    vm.set('document', doc);
    bodyText.setValue(doc.get('body'));
  }

});
/*
 * File: app/view/document/editor/CreatorViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.CreatorViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documenteditorcreator',

  onBeforeRender: function(component, eOpts) {
    var view = this.getView();
    var vm = this.getViewModel();

    // fire documentchange
    var onChange = function() {
      var doc = vm.get('document');
      if (doc.dirty) { vm.set('isSaved', false); }
      view.fireEvent('documentchange', doc);
    };
    var options = { deep: true };
    vm.bind('{document}', onChange, this, options);

    // var motionsPanel = view.down('documentmotionsoutpanel');
    // motionsPanel.getViewModel().bind('{hasDraftMotion}', function() {
    //   console.log('HERE!');
    // }, this);

    // setting files as editable
    var filesPanel = view.down('#files');
    filesPanel.setEditable(true);

    // setting relations as editable
    var relationPanel = view.down('#relations');
    relationPanel.setEditable(true);
  },

  onDocumentChange: function(document) {
    var vm = this.getViewModel();

    // update subject/body properties
    if (document) {
      vm.set('hasSubject', document.get('subject'));
      vm.set('hasBody', document.get('body'));
    }

    // save changes
    if (document.dirty) {
      vm.set('isSaving', true);
      var changes = document.getChanges();
      helpers.api.document.base.updateDraft(document.id, {
        params: changes,
        success: function() {
          document.commit(true);
          vm.set('isSaved', true);
          vm.set('isSaving', false);
        }.bind(this),
        failure: function() {
          console.log('failed to save document');
          vm.set('isSaving', false);
        }
      });
    }
  },

  onSendClick: function(button, e, eOpts) {
    var vm = this.getViewModel();
    var isSending = vm.get('isSending');
    if (!isSending) {
      var view = this.getView();
      var document = vm.get('document');
      var subject = document.get('subject');
      var body = document.get('body');
      if (!subject) {
        Ext.Msg.alert(i18n.errors.title, i18n.document.base.errors.empty_subject);
        return;
      } /*else if (!body) {
        Ext.Msg.alert(i18n.errors.title, i18n.document.base.errors.empty_body);
        return;
      }*/
      vm.set('isSending', true);
      helpers.api.document.base.sendDraft(document.id, {
        success: function() {
          view.fireEvent('documentsent', document);
        }.bind(this),
        failure: function(msg) {
          Ext.Msg.alert(i18n.errors.title, msg);
          vm.set('isSending', false);
        }.bind(this)
      });
    }
  },

  onSaveClick: function(button, e, eOpts) {
    var doc = this.getViewModel().get('document');
    this.onDocumentChange(doc);
  }

});
/*
 * File: app/view/document/editor/CreatorViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.CreatorViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documenteditorcreator',


  data: {
    document: null,
    isSaving: false,
    isSaved: true,
    isSending: false
  },

  formulas: {
    saveButtonText: function(get) {
      var isSaving = get('isSaving');
      var isSaved = get('isSaved');
      if (isSaving) {
        return i18n.ui.saving;
      } else {
        if (isSaved) {
          return i18n.ui.saved;
        } else {
          return i18n.ui.save;
        }
      }
    },
    saveButtonDisabled: function(get) {
      var isSaving = get('isSaving');
      var isSaved = get('isSaved');
      return isSaving || isSaved;
    },
    sendButtonDisabled: function(get) {
      // disable when sending document
      if (get('isSending')) { return true; }
      // disable when no draft motion
      if (!get('hasDraftMotion')) { return true; }
      // checking subject/body
      if (!get('hasSubject')) { return true; }
      // if (!get('hasBody')) { return true; }
      // send is open
      return false;
    }
  }

});
/*
 * File: app/view/document/editor/Editor.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.Editor', {
  extend: 'Ext.container.Container',
  alias: 'widget.documenteditoreditor',


  controller: 'documenteditoreditor',
  viewModel: {
    type: 'documenteditoreditor'
  },
  layout: 'border',
  defaultListenerScope: true,

  items: [
    {
      xtype: 'tabpanel',
      region: 'center',
      border: false,
      padding: '',
      activeTab: 0,
      deferredRender: false,
      tabPosition: 'bottom',
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'top',
          items: [
            {
              xtype: 'button',
              bind: {
                text: '{i18n.document.comment.actions.reply}'
              },
              listeners: {
                click: {
                  fn: 'onReplyClick',
                  scope: 'controller'
                }
              }
            },
            {
              xtype: 'button',
              bind: {
                text: '{i18n.document.base.ui.card}'
              },
              listeners: {
                click: {
                  fn: 'onCardPrintClick',
                  scope: 'controller'
                }
              }
            },
            {
              xtype: 'button',
              bind: {
                text: '{i18n.ui.print}'
              },
              listeners: {
                click: {
                  fn: 'onDocumentPrintClick',
                  scope: 'controller'
                }
              }
            },
            {
              xtype: 'button',
              bind: {
                hidden: '{hideSignButton}',
                text: '{i18n.document.comment.actions.sign}'
              },
              listeners: {
                click: 'onSignDocument'
              }
            },
            {
              xtype: 'button',
              bind: {
                hidden: '{hideAuthorButton}',
                text: '{i18n.document.comment.actions.author}'
              },
              listeners: {
                click: 'onAuthorDocument'
              }
            }
          ]
        }
      ],
      items: [
        {
          xtype: 'panel',
          border: false,
          layout: 'border',
          bind: {
            title: '{i18n.document.base.ui.contentTabTitle}'
          },
          items: [
            {
              xtype: 'container',
              region: 'center',
              layout: {
                type: 'vbox',
                align: 'stretch'
              },
              items: [
                {
                  xtype: 'form',
                  margins: '0',
                  autoScroll: true,
                  border: false,
                  cls: 'document-subject',
                  resizable: false,
                  layout: {
                    type: 'vbox',
                    align: 'stretch'
                  },
                  items: [
                    {
                      xtype: 'displayfield',
                      flex: 1,
                      itemId: 'fldAuthors',
                      shrinkWrap: 2,
                      fieldStyle: 'height: inherit',
                      bind: {
                        fieldLabel: '{i18n.document.base.authors}',
                        value: '{authors}'
                      }
                    },
                    {
                      xtype: 'displayfield',
                      flex: 1,
                      itemId: 'fldDocumentInfo',
                      shrinkWrap: 2,
                      width: '100%',
                      fieldStyle: 'height: inherit',
                      bind: {
                        fieldLabel: '{i18n.document.base.doc}',
                        value: '{docinfo}'
                      }
                    },
                    {
                      xtype: 'displayfield',
                      flex: 1,
                      itemId: 'fldSignees',
                      shrinkWrap: 2,
                      fieldStyle: 'height: inherit',
                      bind: {
                        hidden: '{hideSignees}',
                        fieldLabel: '{i18n.document.base.signees}',
                        value: '{signees}'
                      }
                    },
                    {
                      xtype: 'displayfield',
                      flex: 1,
                      itemId: 'fldIncoming',
                      shrinkWrap: 2,
                      fieldStyle: 'height: inherit',
                      bind: {
                        hidden: '{hideIncoming}',
                        fieldLabel: '{i18n.document.base.from}',
                        value: '{incoming}'
                      }
                    },
                    {
                      xtype: 'displayfield',
                      flex: 1,
                      itemId: 'fldOutgoing',
                      shrinkWrap: 2,
                      fieldStyle: 'height: inherit',
                      bind: {
                        hidden: '{hideOutgoing}',
                        fieldLabel: '{i18n.document.base.to}',
                        value: '{outgoing}'
                      }
                    },
                    {
                      xtype: 'textfield',
                      flex: 1,
                      width: '100%',
                      editable: false,
                      bind: {
                        fieldLabel: '{i18n.document.base.subject}',
                        value: '{document.subject}'
                      }
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 1,
                  cls: 'document-body',
                  overflowY: 'scroll',
                  bind: {
                    html: '{document.body}'
                  }
                }
              ]
            },
            {
              xtype: 'container',
              region: 'east',
              split: true,
              width: 400,
              layout: {
                type: 'accordion',
                hideCollapseTool: true
              },
              items: [
                {
                  xtype: 'documenteditorgeneral',
                  bind: {
                    title: '{i18n.document.base.ui.generalTabTitle}'
                  }
                },
                {
                  xtype: 'documentmotionssignaturesviewer'
                },
                {
                  xtype: 'documentmotionsreceiverspanel'
                },
                {
                  xtype: 'documentmotionstree'
                },
                {
                  xtype: 'documentmotionsresultpanel',
                  listeners: {
                    commentadded: 'onPanelCommentadded'
                  }
                },
                {
                  xtype: 'documentcommentpanel'
                },
                {
                  xtype: 'documentfilepanel'
                },
                {
                  xtype: 'documentrelationpanel'
                }
              ]
            }
          ]
        },
        {
          xtype: 'panel',
          border: false,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            title: '{i18n.document.base.ui.motionsTabTitle}'
          },
          items: [
            {
              xtype: 'documentmotionsinpanel',
              flex: 1,
              listeners: {
                motionchanged: {
                  fn: 'onInMotionChanged',
                  scope: 'controller'
                }
              }
            },
            {
              xtype: 'splitter',
              width: 5
            },
            {
              xtype: 'documentmotionsoutpanel',
              border: false,
              flex: 1
            }
          ]
        }
      ]
    }
  ],
  listeners: {
    destroy: {
      fn: 'onDestroy',
      scope: 'controller'
    },
    afterrender: {
      fn: 'onContainerAfterRender',
      scope: 'controller'
    }
  },

  onSignDocument: function(button, e, eOpts) {
    var view = this;
    var vm = view.getViewModel();
    var doc = vm.get('document');
    var dialog = Ext.create('Tel100.view.document.comment.Sign', { modal: true });
    dialog.getViewModel().set('document', doc);
    dialog.on('signed', function() {
      view.refresh();
    });
    dialog.show();
  },

  onAuthorDocument: function(button, e, eOpts) {
    var view = this;
    var vm = view.getViewModel();
    var doc = vm.get('document');
    var dialog = Ext.create('Tel100.view.document.comment.Author', { modal: true });
    dialog.getViewModel().set('document', doc);
    dialog.on('authored', function() {
      view.refresh();
    });
    dialog.show();
  },

  onPanelCommentadded: function(panel) {
    var commentsPanel = this.down('documentcommentpanel');
    commentsPanel.refresh(function() {
      commentsPanel.setCollapsed(false);
    });
  },

  initComponent: function() {
    this.callParent();
    var general = this.down('documenteditorgeneral');
    general.setReadonly(true);
  },

  refresh: function() {
    var view = this;
    var vm = view.getViewModel();
    var doc = vm.get('document');
    doc.load({
      callback: function() {
        var commentsPanel = view.down('documentcommentpanel');
        var treePanel = view.down('documentmotionstree');
        commentsPanel.refresh();
        treePanel.refresh();
      }
    });
  }

});
/*
 * File: app/view/document/editor/EditorViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.EditorViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documenteditoreditor',

  onReplyClick: function(button, e, eOpts) {
    var vm = this.getViewModel();
    var document = vm.get('document');

    helpers.api.document.base.reply(document.id, {
      success: function(data) {
        var doc = Ext.create('Tel100.model.document.Base', data);
        var dm = this.getView().up('documentmain');
        dm.getViewModel().set('selection', doc);
        dm.getController().openDocument(doc);
      }.bind(this)
    });
  },

  onCardPrintClick: function(button, e, eOpts) {
    var vm = this.getViewModel();
    var document = vm.get('document');
    var url = '/api/documents/print/card/' + document.id;
    helpers.api.document.print.showPDFwindow(url);
  },

  onDocumentPrintClick: function(button, e, eOpts) {
    var vm = this.getViewModel();
    var document = vm.get('document');
    var url = '/api/documents/print/document/' + document.id;
    helpers.api.document.print.showPDFwindow(url);
  },

  onInMotionChanged: function(motion) {
    var view = this.getView();
    var outPanel = view.down('documentmotionsoutpanel');
    if (!motion || motion.get('type') === 'document') {
      outPanel.setParentId(null);
    } else {
      outPanel.setParentId(motion.id);
    }
    outPanel.refresh();
  },

  onDestroy: function(component, eOpts) {
    if (component.commentsDialog) {
      component.commentsDialog.destroy();
    }
  },

  onContainerAfterRender: function(component, eOpts) {
    helpers.party.employeeTips(component);
  }

});
/*
 * File: app/view/document/editor/EditorViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.EditorViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documenteditoreditor',


  data: {
    document: null
  },

  formulas: {
    hideSignButton: function(get) {
      return get('document.as_signee') !== 1;
    },
    hideAuthorButton: function(get) {
      return get('document.as_author') !== 1;
    },
    authors: function(get) {
      var authors = get('document.authors');
      var text = [];
      if (authors.length) {
        for(var i = 0; i < authors.length; i++) {
          var author = authors[i];
          var decor = helpers.document.status.statusDecoration(author.status);
          text.push([
          '<span class="' + decor.style + '">',
          '<i class="fa ' + decor.icon + '"></i> ',
          '<a data-id="' + author.author_id + '" data-class="' + author.author_type + '">' + author.name + '</a>',
          ( author.response ? ' &mdash; ' + author.response : '' ),
          '</span>'
          ].join(''));
        }
        return text.join('; ');
      } else {
        var status = get('document.status');
        var decor = helpers.document.status.statusDecoration(status);
        var senderName = get('document.sender_name');
        var senderId = get('document.sender_id');
        var senderType = get('document.sender_type');
        return [
        //     '<strong class="text-success">' + i18n.document.base.sender + '</strong> &mdash; ',
        '<span class="' + decor.style + '">',
        '<i class="fa ' + decor.icon + '"></i> ',
        '<a data-id="' + senderId + '" data-class="' + senderType + '">' + senderName + '</a>',
        '</span>'
        ].join('');
      }
    },
    hideSignees: function(get) {
      var signees = get('document.signees');
      return !signees || signees.length === 0;
    },
    signees: function(get) {
      var signees = get('document.signees');
      var text = [];
      for(var i = 0; i < signees.length; i++) {
        var signee = signees[i];
        var decor = helpers.document.status.statusDecoration(signee.status);
        text.push([
        '<span class="' + decor.style + '">',
        '<i class="fa ' + decor.icon + '"></i> ',
        '<a data-id="' + signee.signee_id + '" data-class="' + signee.signee_type + '">' + signee.name + '</a>',
        ( signee.response ? ' &mdash; ' + signee.response : '' ),
        '</span> ',
        ( signee.completed_at ? '<span class="text-danger">' + signee.completed_at + '</span>' : '' )
        ].join(''));
      }
      return text.join('; ');
    },
    docinfo: function(get) {
      var docnumber = get('document.docnumber');
      var typeName = get('document.type.name');
      var status = get('document.status');
      var decor = helpers.document.status.statusDecoration(status);
      var senderName = get('document.sender_name');
      var senderId = get('document.sender_id');
      var senderType = get('document.sender_type');
      var sentAt = get('document.sent_at_f');
      return [
      '<span class="' + decor.style + '">',
      '<i class="fa ' + decor.icon + '"></i> ',
      '<strong>' + docnumber + '</strong>',
      '</span> ',
      '<span class="text-muted">' + typeName + '</span> &mdash; ',
      '<strong><a data-id="' + senderId + '" data-class="' + senderType + '">' + senderName + '</a></strong>, ',
      '<span class="text-danger">' + sentAt + '</span>'
      ].join('');
    },
    incoming: function(get) {
      var incoming = get('document.incoming');
      var text = [];
      incoming.forEach(function(motion) {
        text.push(helpers.document.renderer.renderMotion(motion, { as: 'sender' }));
      });
      return text.join('; ');
    },
    hideIncoming: function(get) {
      return !get('document.incoming').length;
    },
    outgoing: function(get) {
      var outgoing = get('document.outgoing');
      var text = [];
      outgoing.forEach(function(motion) {
        text.push(helpers.document.renderer.renderMotion(motion, { as: 'receiver' }));
      });
      return text.join('; ');
    },
    hideOutgoing: function(get) {
      return !get('document.outgoing').length;
    }
  }

});
/*
 * File: app/view/document/editor/General.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.General', {
  extend: 'Ext.form.Panel',
  alias: 'widget.documenteditorgeneral',


  controller: 'documenteditorgeneral',
  viewModel: {
    type: 'documenteditorgeneral'
  },
  autoScroll: true,
  bodyPadding: 5,

  items: [
    {
      xtype: 'textfield',
      anchor: '100%',
      editable: false,
      bind: {
        fieldLabel: '{i18n.document.base.sender}',
        value: '{document.sender_name}'
      }
    },
    {
      xtype: 'combobox',
      anchor: '100%',
      editable: false,
      displayField: 'name',
      valueField: 'id',
      bind: {
        fieldLabel: '{i18n.document.base.type}',
        value: '{document.type_id}',
        readOnly: '{readonly}',
        store: '{types}'
      },
      listeners: {
        change: 'onTypeIdChange'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      bind: {
        fieldLabel: '{i18n.document.base.docnumber}',
        value: '{document.docnumber}',
        readOnly: '{readonly}'
      }
    },
    {
      xtype: 'datefield',
      format: 'd/m/Y',
      bind: {
        fieldLabel: '{i18n.document.base.docdate}',
        value: '{document.docdate}',
        readOnly: '{readonly}'
      }
    },
    {
      xtype: 'datefield',
      format: 'd/m/Y',
      bind: {
        fieldLabel: '{i18n.document.base.due_date}',
        value: '{document.due_date}',
        readOnly: '{readonly}'
      }
    },
    {
      xtype: 'numberfield',
      anchor: '100%',
      minValue: 0,
      bind: {
        fieldLabel: '{i18n.document.base.page_count}',
        value: '{document.page_count}',
        readOnly: '{readonly}'
      }
    },
    {
      xtype: 'numberfield',
      anchor: '100%',
      minValue: 0,
      bind: {
        fieldLabel: '{i18n.document.base.additions_count}',
        value: '{document.additions_count}',
        readOnly: '{readonly}'
      }
    },
    {
      xtype: 'combobox',
      anchor: '100%',
      editable: false,
      displayField: 'name',
      valueField: 'id',
      bind: {
        fieldLabel: '{i18n.document.base.direction}',
        value: '{document.direction}',
        readOnly: '{readonly}',
        store: '{directions}'
      }
    },
    {
      xtype: 'fieldset',
      bind: {
        hidden: '{!isIncoming}',
        title: '{i18n.document.base.in_fields}'
      },
      items: [
        {
          xtype: 'textfield',
          anchor: '100%',
          bind: {
            fieldLabel: '{i18n.document.base.original_number}',
            value: '{document.original_number}',
            readOnly: '{readonly}'
          }
        },
        {
          xtype: 'datefield',
          anchor: '100%',
          format: 'd/m/Y',
          bind: {
            fieldLabel: '{i18n.document.base.original_date}',
            value: '{document.original_date}',
            readOnly: '{readonly}'
          }
        }
      ]
    }
  ],

  getReadonly: function() {
    return this.getViewModel().get('readonly');
  },

  setReadonly: function(ro) {
    return this.getViewModel().set('readonly', ro);
  }

});
/*
 * File: app/view/document/editor/GeneralViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.GeneralViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documenteditorgeneral',

  onTypeIdChange: function(field, newValue, oldValue, eOpts) {
    var vm = this.getViewModel();
    var doc = vm.get('document');
    if (doc.dirty) {
      doc.set('type', field.getSelectedRecord());
    }
  }

});
/*
 * File: app/view/document/editor/GeneralViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.editor.GeneralViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documenteditorgeneral',


  data: {
    readonly: false
  },

  stores: {
    types: {
      autoLoad: true,
      model: 'Tel100.model.document.Type'
    },
    directions: {
      autoLoad: true,
      model: 'Tel100.model.document.Direction',
      proxy: {
        type: 'memory',
        data: [
          {
            id: 'inner'
          },
          {
            id: 'out'
          },
          {
            id: 'in'
          }
        ]
      }
    }
  },
  formulas: {
    isIncoming: function(get) {
      return get('document.direction') === 'in';
    }
  }

});
/*
 * File: app/view/document/file/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.file.Panel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentfilepanel',


  controller: 'documentfilepanel',
  viewModel: {
    type: 'documentfilepanel'
  },
  border: false,
  layout: 'fit',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.file.attachments} ({fileCount})'
  },
  dockedItems: [
    {
      xtype: 'toolbar',
      dock: 'top',
      border: 0,
      bind: {
        hidden: '{notEditable}'
      },
      items: [
        {
          xtype: 'form',
          border: false,
          padding: 0,
          bodyPadding: 0,
          items: [
            {
              xtype: 'filefield',
              cls: 'file-upload',
              padding: 0,
              name: 'file',
              buttonText: '<i class="fa fa-plus"></i>',
              listeners: {
                change: {
                  fn: 'onFilefieldChange',
                  scope: 'controller'
                }
              }
            }
          ]
        }
      ]
    }
  ],
  items: [
    {
      xtype: 'gridpanel',
      autoScroll: true,
      border: false,
      hideHeaders: true,
      scroll: 'vertical',
      bind: {
        store: '{files}'
      },
      columns: [
        {
          xtype: 'gridcolumn',
          dataIndex: 'name',
          flex: 1
        },
        {
          xtype: 'actioncolumn',
          width: 24,
          bind: {
            hidden: '{notEditable}'
          },
          items: [
            {
              handler: function(view, rowIndex, colIndex, item, e, record, row) {
                var id = record.id;
                helpers.api.document.file.delete(id, {
                  success: function() {
                    view.up('documentfilepanel').refresh();
                  }
                });
              },
              icon: '/images/delete.gif'
            }
          ]
        }
      ],
      listeners: {
        celldblclick: {
          fn: 'onGridpanelCellDblClick',
          scope: 'controller'
        }
      }
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    }
  ],

  onRefresh: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  refresh: function() {
    var vm = this.getViewModel();
    vm.getStore('files').load();
  },

  initComponent: function() {
    this.callParent();
    var view = this;
    var viewModel = this.getViewModel();
    viewModel.bind('{files}', function(store) {
      if (store) {
        store.view = view;
        store.viewModel = viewModel;
      }
    });
  },

  setEditable: function(editable) {
    var vm = this.getViewModel();
    vm.set('editable', editable);
  },

  getEditable: function() {
    var vm = this.getViewModel();
    return vm.get('editable');
  }

});
/*
 * File: app/view/document/file/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.file.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentfilepanel',

  onFilefieldChange: function(filefield, value, eOpts) {
    if (value) {
      var form = filefield.up('form').getForm();
      var vm = this.getViewModel();
      var view = this.getView();
      var doc = vm.get('document');
      form.submit({
        url: '/api/documents/files/upload?document_id=' + doc.id,
        success: function() {
          view.refresh();
        }
      });
    }
  },

  onGridpanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    var url = '/api/documents/files/download?id=' + record.id;
    var tab = window.open(url, 'tel100');
    tab.focus();
  }

});
/*
 * File: app/view/document/file/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.file.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentfilepanel',


  data: {
    fileCount: 0,
    editable: false
  },

  stores: {
    files: {
      listeners: {
        datachanged: function() {
          var store = this;
          this.viewModel.set('fileCount', store.getCount());
          this.view.fireEvent('fileschanged', store);
        }
      },
      autoLoad: true,
      model: 'Tel100.model.document.File',
      proxy: {
        type: 'ajax',
        extraParams: {
          document_id: '{document.id}'
        },
        url: '/api/documents/files',
        reader: {
          type: 'json'
        }
      }
    }
  },
  formulas: {
    notEditable: function(get) {
      return !get('editable');
    }
  }

});
/*
 * File: app/view/document/folder/Config.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.Config', {
  extend: 'Ext.window.Window',
  alias: 'widget.documentfolderconfig',


  controller: 'documentfolderconfig',
  viewModel: {
    type: 'documentfolderconfig'
  },
  height: 353,
  width: 303,
  layout: 'fit',
  modal: true,

  bind: {
    title: '{i18n.document.folder.categories.b}'
  },
  items: [
    {
      xtype: 'gridpanel',
      header: false,
      title: 'My Grid Panel',
      hideHeaders: true,
      store: 'CustomFolders',
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.api.folders.folderDecoration(record.get('folder_type'), record.get('name'));
          },
          dataIndex: 'name',
          text: 'String',
          flex: 1
        }
      ],
      selModel: {
        selType: 'rowmodel'
      }
    }
  ],
  dockedItems: [
    {
      xtype: 'toolbar',
      dock: 'right',
      vertical: true,
      items: [
        {
          xtype: 'button',
          text: '+',
          listeners: {
            click: 'onPlusButtonClick'
          }
        },
        {
          xtype: 'button',
          text: '-',
          listeners: {
            click: 'onMinusButtonClick'
          }
        },
        {
          xtype: 'button',
          text: '^'
        },
        {
          xtype: 'button',
          text: 'v'
        }
      ]
    }
  ]

});
/*
 * File: app/view/document/folder/ConfigViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.ConfigViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentfolderconfig',

  onPlusButtonClick: function(button, e, eOpts) {
    //Ext.MessageBox.prompt(i18n.ui.folder,i18n.ui.enter_name, function(btn, text){
    Ext.MessageBox.prompt('Folder','Enter name', function(btn, text){
      if(btn == 'ok'){
        Ext.Ajax.request({
          url: '/api/folder',
          method: 'POST',
          params: { name: text, folder_type: 0 },
          success: function(response){
            var folderstore = Ext.getStore('CustomFolders');
            folderstore.reload();
          },
          failure: function(response){
            Ext.MessageBox.alert('error');
          }
        });
        close();
      }
    });
  },

  onMinusButtonClick: function(button, e, eOpts) {
    var grid = button.up('window').down('grid');
    var store = grid.store;
    var selection = grid.selection;
    if (selection){
      Ext.Msg.show({
        title: i18n.ui.destroy,
        message: i18n.ui.destroyConfirm,
        buttons: Ext.Msg.YESNO,
        icon: Ext.Msg.QUESTION,
        fn: function(btn) {
          if (btn === 'yes') {
            store.remove(selection);
            store.sync();
            store.reload();
          }
        }
      });
    }

  }

});
/*
 * File: app/view/document/folder/ConfigViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.ConfigViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentfolderconfig'

});
/*
 * File: app/view/document/folder/Search.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.Search', {
  extend: 'Ext.form.Panel',
  alias: 'widget.documentfoldersearch',


  controller: 'documentfoldersearch',
  viewModel: {
    type: 'documentfoldersearch'
  },
  autoScroll: true,
  bodyPadding: 10,
  url: '/api/documents/base/search',

  items: [
    {
      xtype: 'combobox',
      anchor: '100%',
      name: 'folder',
      editable: false,
      displayField: 'name',
      valueField: 'id',
      bind: {
        fieldLabel: '{i18n.document.search.folder}',
        store: '{standardFolders}'
      }
    },
    {
      xtype: 'combobox',
      anchor: '100%',
      name: 'type',
      editable: false,
      displayField: 'name',
      valueField: 'id',
      bind: {
        fieldLabel: '{i18n.document.search.type}',
        store: '{types}'
      }
    },
    {
      xtype: 'combobox',
      anchor: '100%',
      name: 'direction',
      editable: false,
      displayField: 'name',
      valueField: 'id',
      bind: {
        fieldLabel: '{i18n.document.search.direction}',
        store: '{direction}'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      name: 'subject',
      bind: {
        fieldLabel: '{i18n.document.search.subject}'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      name: 'original_number',
      bind: {
        fieldLabel: '{i18n.document.search.original_number}'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      name: 'docnumber',
      bind: {
        fieldLabel: '{i18n.document.search.docnumber}'
      }
    },
    {
      xtype: 'spinnerfield',
      anchor: '100%',
      name: 'docyear',
      bind: {
        fieldLabel: '{i18n.document.search.docyear}'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      name: 'sender',
      bind: {
        fieldLabel: '{i18n.document.search.sender}'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      name: 'author',
      bind: {
        fieldLabel: '{i18n.document.search.author}'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      name: 'assignee',
      bind: {
        fieldLabel: '{i18n.document.search.assignee}'
      }
    },
    {
      xtype: 'textfield',
      anchor: '100%',
      name: 'signee',
      bind: {
        fieldLabel: '{i18n.document.search.signee}'
      }
    },
    {
      xtype: 'fieldcontainer',
      anchor: '100%',
      layout: {
        type: 'hbox',
        align: 'stretch'
      },
      bind: {
        fieldLabel: '{i18n.document.search.customer}'
      },
      items: [
        {
          xtype: 'textfield',
          flex: 1,
          name: 'customer'
        },
        {
          xtype: 'button',
          width: 25,
          text: '...',
          listeners: {
            click: 'onChoseCustomerButtonClick'
          }
        }
      ]
    },
    {
      xtype: 'spinnerfield',
      anchor: '100%',
      name: 'page_count',
      bind: {
        fieldLabel: '{i18n.document.search.page_count}'
      }
    },
    {
      xtype: 'fieldset',
      layout: 'form',
      bind: {
        title: '{i18n.document.search.docdate}'
      },
      items: [
        {
          xtype: 'datefield',
          name: 'docdate_from',
          format: 'd/m/Y',
          bind: {
            fieldLabel: '{i18n.document.search.from}'
          }
        },
        {
          xtype: 'datefield',
          name: 'docdate_to',
          format: 'd/m/Y',
          bind: {
            fieldLabel: '{i18n.document.search.to}'
          }
        }
      ]
    },
    {
      xtype: 'button',
      width: '100%',
      bind: {
        text: '{i18n.document.search.buttons.search}'
      },
      listeners: {
        click: 'onSearchButtonClick'
      }
    },
    {
      xtype: 'button',
      width: '100%',
      bind: {
        text: '{i18n.document.search.buttons.reset}'
      },
      listeners: {
        click: 'onResetButtonClick'
      }
    },
    {
      xtype: 'button',
      formBind: true,
      width: '100%',
      bind: {
        text: '{i18n.document.search.buttons.savefilter}'
      },
      listeners: {
        click: 'onSaveFilterButtonClick'
      }
    }
  ]

});
/*
 * File: app/view/document/folder/SearchViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.SearchViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentfoldersearch',

  search: function() {
        var view = this.getView();
        var params = view.getForm().getValues();
        var url = '/api/documents/base/search';
        view.fireEvent('searchstart', url, params);
        view.up().fireEvent('folderChosen');
  },

  onChoseCustomerButtonClick: function(button, e, eOpts) {
    var receiverDialog = Ext.create('Tel100.view.party.Selector', {
      title: i18n.document.search.choseCustomer,
      viewModel:{
        data: {
          hideHR: true,
          hideParty: true,
          hideCustomers: false
        }
      }
    });
    receiverDialog.show();
    receiverDialog.on('selectioncomplete', function(receivers) {
      if (receivers.length > 0) {
        var customer = receivers[0];
        this.getView().getForm().setValues({customer: customer.get('custkey')});
      }
    }.bind(this));
  },

  onSearchButtonClick: function(button, e, eOpts) {
    this.search();
  },

  onResetButtonClick: function(button, e, eOpts) {
    button.up('form').reset();
  },

  onSaveFilterButtonClick: function(button, e, eOpts) {
    var values = Ext.encode(button.up('form').getForm().getValues());
    Ext.MessageBox.prompt('Folder','Enter name', function(btn, text){
      if(btn == 'ok'){
        Ext.Ajax.request({
          url: '/api/folder',
          method: 'POST',
          params: { name: text, folder_type: 1, form: values },
          success: function(response){
            var folderstore = Ext.getStore('CustomFolders');
            folderstore.reload();
          },
          failure: function(response){
            Ext.MessageBox.alert('error');
          }
        });
        close();
      }
    });
  }

});
/*
 * File: app/view/document/folder/SearchViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.SearchViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentfoldersearch',


  stores: {
    types: {
      autoLoad: true,
      model: 'Tel100.model.document.Type'
    },
    standardFolders: {
      autoLoad: true,
      model: 'Tel100.model.folder.Standard'
    },
    direction: {
      autoLoad: true,
      model: 'Tel100.model.document.Direction',
      proxy: {
        type: 'memory',
        data: [
          {
            id: 'inner'
          },
          {
            id: 'out'
          },
          {
            id: 'in'
          }
        ]
      }
    }
  }

});
/*
 * File: app/view/document/folder/Tab.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.Tab', {
  extend: 'Ext.tab.Panel',
  alias: 'widget.documentfoldertab',


  controller: 'documentfoldertab',
  viewModel: {
    type: 'documentfoldertab'
  },
  header: false,
  activeTab: 0,
  defaultListenerScope: true,

  items: [
    {
      xtype: 'panel',
      layout: {
        type: 'vbox',
        align: 'stretch'
      },
      bind: {
        title: '{i18n.document.folder.ui.folders}'
      },
      items: [
        {
          xtype: 'gridpanel',
          border: false,
          itemId: 'standardFolders',
          enableColumnHide: false,
          enableColumnMove: false,
          enableColumnResize: false,
          hideHeaders: true,
          sortableColumns: false,
          bind: {
            store: '{standardfolders}'
          },
          columns: [
            {
              xtype: 'gridcolumn',
              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                var s;
                if(record.data.parent_id){
                  s = '<span style="float: left; margin-left: 20px;">' + record.data.icon + ' ' + value + '</span>';
                } else {
                  s = record.data.icon + ' ' + value;
                }

                return s + '<span style="float:right;">' + record.data.count + '</span>';
              },
              sortable: false,
              dataIndex: 'name',
              flex: 1,
              bind: {
                text: '{i18n.document.folder.categories.a}'
              }
            }
          ],
          selModel: {
            selType: 'rowmodel',
            allowDeselect: true,
            mode: 'SINGLE'
          },
          listeners: {
            itemclick: {
              fn: 'onStandardGridpanelSelect',
              scope: 'controller'
            }
          },
          dockedItems: [
            {
              xtype: 'toolbar',
              dock: 'top',
              items: [
                {
                  xtype: 'button',
                  text: '<i class="fa fa-refresh"></i>',
                  listeners: {
                    click: {
                      fn: 'onRefreshFolderButtonClick',
                      scope: 'controller'
                    }
                  }
                },
                {
                  xtype: 'tbfill'
                },
                {
                  xtype: 'tbseparator'
                },
                {
                  xtype: 'button',
                  text: '<span class="text-muted"><i class="fa fa-cog"></i></span>',
                  listeners: {
                    click: 'onSetupFoldersButtonClick'
                  }
                }
              ]
            }
          ]
        },
        {
          xtype: 'gridpanel',
          flex: 1,
          border: false,
          itemId: 'customFolders',
          header: false,
          title: 'TEST',
          store: 'CustomFolders',
          columns: [
            {
              xtype: 'gridcolumn',
              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                var s = ( record.get('folder_type') === 0 ? '<span style="float:right;">' + record.data.count + '</span>' : "");
                return helpers.api.folders.folderDecoration(record.get('folder_type'), record.get('name')) + s;
              },
              enableColumnHide: false,
              sortable: false,
              dataIndex: 'name',
              hideable: false,
              tdCls: 'foldercls',
              flex: 1,
              bind: {
                text: '{i18n.document.folder.categories.b}'
              }
            }
          ],
          listeners: {
            afterrender: {
              fn: 'onGridpanelAfterRender',
              scope: 'controller'
            },
            select: {
              fn: 'onCustomFoldersSelect',
              scope: 'controller'
            },
            beforerender: {
              fn: 'onCustomFoldersBeforeRender',
              scope: 'controller'
            }
          }
        },
        {
          xtype: 'gridpanel',
          border: false,
          hidden: true,
          collapsible: true,
          hideHeaders: true,
          bind: {
            title: '{i18n.vacation.ui.grid_title}',
            store: '{substitudeStore}'
          },
          columns: [
            {
              xtype: 'gridcolumn',
              dataIndex: 'name',
              flex: 1
            }
          ],
          listeners: {
            cellclick: {
              fn: 'onGridpanelCellClick',
              scope: 'controller'
            }
          }
        }
      ]
    },
    {
      xtype: 'documentfoldersearch',
      bind: {
        title: '{i18n.document.search.ui.search}'
      }
    }
  ],
  listeners: {
    afterrender: 'onTabpanelAfterRender',
    documentgridrefresh: {
      fn: 'onDocumentGridRefresh',
      scope: 'controller'
    }
  },

  onSetupFoldersButtonClick: function(button, e, eOpts) {
    var configwindow = Ext.create('Tel100.view.document.folder.Config');
                            configwindow.show();
  },

  onTabpanelAfterRender: function(component, eOpts) {
    /* var bar = component.tabBar;
                bar.insert(2,[
                     {
                         xtype: 'component',
                         flex: 1
                     },
                    {
                        xtype: 'button',
                        text: '<i class="fa fa-cog"></i>',
                      handler: function(button){
                        var configwindow = Ext.create('Tel100.view.document.folder.Config');
                        configwindow.show();
                      }
                    }
                ]);
      */
  }

});
/*
 * File: app/view/document/folder/TabViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.TabViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentfoldertab',

  refreshDocuments: function(opts) {
    var dg = this.getView().up().down('documentgridpanel');
    var url = '/api/documents/base';
    dg.getController().setStoreConfig({url: url, extraParams: opts});
    dg.refresh();
  },

  onGearClick: function(button) {
    var configwindow = Ext.create('Tel100.view.document.folder.Config');
    configwindow.show();
  },

  foldersRefresh: function() {
    this.getViewModel().getStore('standardfolders').reload();
    Ext.getStore('CustomFolders').reload();
  },

  onStandardGridpanelSelect: function(dataview, record, item, index, e, eOpts) {
    this.refreshDocuments({folderType: 'standard', folderId: record.id});
    this.getView().down('#customFolders').getSelectionModel().deselectAll();
    this.getView().up().getViewModel().set('customfolderselection', null);
    this.getView().fireEvent('folderChosen');
  },

  onRefreshFolderButtonClick: function(button, e, eOpts) {
    this.foldersRefresh();
    this.getView().fireEvent('foldersrefresh');
  },

  onGridpanelAfterRender: function(component, eOpts) {
    component.dropZone = Ext.create('Ext.dd.DropZone', component.el,{
      ddGroup: 'Grid2FolderDDGroup',

      getTargetFromEvent: function(e) {
        return e.getTarget('.foldercls');
      },

      onNodeEnter : function(target, dd, e, data){
        Ext.fly(target).highlight();
      },

      onNodeOver : function(target, dd, e, data){
        var customGrid = Ext.ComponentQuery.query('grid[itemId=customFolders]')[0];
        var view = customGrid.getView();
        var record = view.getRecord(target);

        var proto = Ext.dd.DropZone.prototype;
        return record.get('folder_type') === 0 ? proto.dropAllowed : proto.dropNotAllowed;
      },

      onNodeDrop : function(target, dd, e, data){
        var customGrid = Ext.ComponentQuery.query('grid[itemId=customFolders]')[0];
        var view = customGrid.getView();
        var record = view.getRecord(target);

        var vm = customGrid.up('panel').getViewModel();
        var model = Ext.create('Tel100.model.folder.Document',{
          folder_id: record.id, doc_id: data.records[0].id
        });
        model.save();

        return true;
      }
    });
  },

  onCustomFoldersSelect: function(rowmodel, record, index, eOpts) {
    if(record.get('folder_type') === 0){
      this.refreshDocuments({folderType: 'custom', folderId: record.id});
    } else {
      var view = this.getView();
      var searchform = view.down('documentfoldersearch');
      searchform.getForm().setValues(Ext.decode(record.get('form')));
      searchform.getController().search();
    }

    this.getView().down('#standardFolders').getSelectionModel().deselectAll();
    this.getView().up().getViewModel().set('customfolderselection', rowmodel.getSelection());
  },

  onCustomFoldersBeforeRender: function(component, eOpts) {
    Ext.getStore('CustomFolders').load();
  },

  onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {

    var me = this;

    if(Ext.ComponentQuery.query('usersubstitudepanel').length === 0){
      helpers.api.substitude.setSubstitude(record.get('id'));
      var dg = this.getView().up().down('documentgridpanel');
      var me = this;

      var toppanel = Ext.create('Tel100.view.user.substitude.Panel',
        { html: i18n.vacation.ui.substitude_mode.title + record.data.name });
      toppanel.down('button').on('click',function(){
        helpers.api.substitude.setSubstitude(null);
        dg.refresh();
        me.foldersRefresh();
      });
      toppanel.show().alignTo(Ext.getBody(), 't-t');
      this.getView().up().down('documentgridpanel').refresh();
      dg.refresh();
      me.foldersRefresh();
    }
  },

  onDocumentGridRefresh: function(tabpanel) {
    this.foldersRefresh();
  }

});
/*
 * File: app/view/document/folder/TabViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.folder.TabViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentfoldertab',


  stores: {
    documentStore: {
      model: 'Tel100.model.folder.Document'
    },
    standardfolders: {
      autoLoad: true,
      model: 'Tel100.model.folder.Standard'
    },
    substitudeStore: {
      autoLoad: false,
      proxy: {
        type: 'rest',
        url: '/api/vacation/substitudes'
      },
      fields: [
        {
          name: 'id'
        },
        {
          name: 'substitude_type'
        },
        {
          calculate: function(data) {
            return data.first_name + " " + data.last_name;
          },
          name: 'name'
        },
        {
          name: 'first_name'
        },
        {
          name: 'last_name'
        },
        {
          name: 'userid'
        }
      ]
    }
  }

});
/*
 * File: app/view/document/grid/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.grid.Panel', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.documentgridpanel',


  controller: 'documentgridpanel',
  viewModel: {
    type: 'documentgridpanel'
  },
  border: false,
  enableColumnHide: false,
  enableColumnMove: false,
  sortableColumns: false,
  defaultListenerScope: true,

  bind: {
    store: '{documents}'
  },
  viewConfig: {
    getRowClass: function(record, rowIndex, rowParams, store) {
      var status = record.get('status');
      var statusClass = helpers.document.status.documentStatusRowClass(status, record);

      var isChanged = record.get('is_changed');
      if (isChanged) {
        statusClass += ' text-unread';
      }

      if (record.get('due_is_over')) {
        statusClass += ' danger';
      } else if (record.get('has_due_date')) {
        statusClass += ' warning';
      }

      return statusClass;
    },
    plugins: [
      {
        ptype: 'gridviewdragdrop',
        pluginId: 'draganddropplug',
        ddGroup: 'Grid2FolderDDGroup',
        enableDrop: false
      }
    ]
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var text = value;
        if(record.get('is_reply')){
          text = ['<i class="fa fa-reply"></i>', value].join(' ');
        }

        return [text, record.get('typeName')].join('<br>');
      },
      width: 100,
      sortable: false,
      dataIndex: 'docnumber',
      hideable: false,
      lockable: false,
      bind: {
        text: '{i18n.document.base.docnumber}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        if (record.get('as_signee') === 1) {
          return '<strong class="text-danger">' + i18n.document.comment.actions.sign +'</strong>';
        } else if (record.get('as_author') === 1) {
          return '<strong class="text-danger">' + i18n.document.comment.actions.author +'</strong>';
        }
      },
      lockable: false,
      bind: {
        text: '{i18n.document.base.actions}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var text = [];
        text.push(value); // status
        var dueDate = record.get('current_due_date');
        if (dueDate) {
          text.push('<span class="text-warning"><i class="fa fa-warning"></i> <strong>' +
          Ext.Date.format(new Date(dueDate), 'd/m/Y') + '</strong></span>');
        }
        text.push(record.get('directionName')); // direction
        return text.join('<br>');
      },
      width: 130,
      sortable: false,
      dataIndex: 'statusName',
      hideable: false,
      bind: {
        text: '{i18n.document.base.status}<br>{i18n.document.base.direction}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        // date formatted
        var dateFormatted;
        if (value) {
          dateFormatted = Ext.Date.format(value,"d/m/Y");
        }

        // status value
        var mystat = helpers.document.user.myStatus(record);
        var iconText;
        if (mystat.unread) {
          iconText = '<i class="fa fa-circle text-danger"></i>';
        } else {
          iconText = '<i class="fa ' + mystat.icon + '"></i>';
        }
        var myStatus =  ['<span class="' + mystat.style + '">',
          iconText + ' ', mystat.name, '</span>'].join('');

        // concat both fields
        return [ myStatus, dateFormatted ].join('<br>');
      },
      width: 150,
      sortable: false,
      dataIndex: 'docdate',
      hideable: false,
      bind: {
        text: '{i18n.document.base.my_status}<br>{i18n.document.base.docdate}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.motion.formatReceivers(value, metaData, { prefix: 'assignee' });
      },
      width: 200,
      sortable: false,
      cellWrap: true,
      dataIndex: 'assignees',
      hideable: false,
      bind: {
        text: '{i18n.document.base.assignees}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.motion.formatReceivers(value, metaData, { prefix: 'author' });
      },
      width: 200,
      sortable: false,
      cellWrap: true,
      dataIndex: 'authors',
      hideable: false,
      bind: {
        text: '{i18n.document.base.authors}'
      }
    },
    {
      xtype: 'gridcolumn',
      width: 150,
      sortable: false,
      dataIndex: 'subject',
      hideable: false,
      bind: {
        text: '{i18n.document.base.subject}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.motion.formatReceivers(value, metaData, { prefix: 'signee' });
      },
      width: 200,
      sortable: false,
      cellWrap: true,
      dataIndex: 'signees',
      hideable: false,
      bind: {
        text: '{i18n.document.base.signees}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.motion.formatResponses(value, metaData);
      },
      width: 200,
      dataIndex: 'incoming',
      bind: {
        text: '{i18n.document.base.response}'
      }
    },
    {
      xtype: 'gridcolumn',
      sortable: false,
      dataIndex: 'original_number',
      hideable: false,
      bind: {
        text: '{i18n.document.base.original_number}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'original_date',
      formatter: 'date("d/m/Y")',
      hideable: false,
      bind: {
        text: '{i18n.document.base.original_date}'
      }
    }
  ],
  listeners: {
    beforeitemcontextmenu: {
      fn: 'onGridpanelBeforeItemContextMenu',
      scope: 'controller'
    },
    afterrender: {
      fn: 'onGridpanelAfterRender',
      scope: 'controller'
    },
    celldblclick: 'onGridpanelCellDblClick'
  },

  onGridpanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    var actionIndex = 1; // index of sign column
    if (cellIndex === actionIndex && record.get('as_signee') === 1) {
      this.fireEvent('documentsign', record);
    } else if (cellIndex === actionIndex && record.get('as_author') === 1) {
      this.fireEvent('documentauthor', record);
    } else {
      this.fireEvent('documentopen', record);
    }
  },

  refresh: function(opts) {
    var grid = this;
    var store = grid.getStore();
    store.load(opts);
  }

});
/*
 * File: app/view/document/grid/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.grid.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentgridpanel',

  setStoreConfig: function(opts, values) {
    var proxy = this.getStore('documents').getProxy();
    proxy.setConfig(opts, values);

    var subst = Ext.ComponentQuery.query('#main-viewport')[0].getViewModel().get('substitude');
    if(subst){
      proxy.setExtraParam('substitude', subst.get('id'));
    } else {
      proxy.setExtraParam('substitude', null);
    }
  },

  moveDocumentToFolder: function(id) {
    debugger;
    var model = Ext.create('Tel100.model.folder.Document',{
          folder_id: id, doc_id: data.records[0].id
        });
        model.save();
  },

  addPagingToolbar: function(component) {
    component.addDocked(new Ext.PagingToolbar({
      displayInfo: true,
      dock: 'bottom',
      afterPageText: ' / {0}',
      beforePageText: i18n.ui.page,
      emptyMsg: i18n.ui.emptyMsg,
      displayMsg : i18n.ui.displayMsg,
      bind: {
        store: '{documents}'
      }
    })
    );
  },

  onGridpanelBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    var document = record;
    var folderMenu = Ext.create('Ext.menu.Menu');
    var CustomFoldersStore = Ext.getStore('CustomFolders');
    CustomFoldersStore.each(function(record,id){
      if(record.get('folder_type') === 0){
        folderMenu.add({
          text: record.get('name'),
          handler: function(item){
            var model = Ext.create('Tel100.model.folder.Document', { folder_id: record.id, doc_id: document.id });
            model.save();
          }
        });
      }
    });

    var gridMenu = Ext.create('Ext.menu.Menu', {
      items: [{
        text: i18n.document.folder.ui.move_to,
        icon: '/images/move.png',
        menu: folderMenu
      }]
    });

    e.stopEvent();
    gridMenu.showAt(e.getXY());
  },

  onGridpanelAfterRender: function(component, eOpts) {
    this.getView().getController().addPagingToolbar(component);
    helpers.party.employeeTips(component);
  }

});
/*
 * File: app/view/document/grid/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.grid.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentgridpanel',


  data: {
    selectionCriteria: null
  },

  stores: {
    documents: {
      autoLoad: true,
      model: 'Tel100.model.document.Base',
      proxy: {
        type: 'ajax',
        url: '/api/documents/base',
        reader: {
          type: 'json',
          rootProperty: 'data'
        }
      }
    }
  }

});
/*
 * File: app/view/document/motions/AssigneeAddDialog.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneeAddDialog', {
  extend: 'Ext.window.Window',
  alias: 'widget.documentmotionsassigneeadddialog',


  controller: 'documentmotionsassigneeadddialog',
  viewModel: {
    type: 'documentmotionsassigneeadddialog'
  },
  height: 450,
  width: 850,
  layout: 'border',
  maximizable: true,

  bind: {
    title: '{i18n.document.motion.add_assignees}'
  },
  items: [
    {
      xtype: 'gridpanel',
      region: 'west',
      split: true,
      itemId: 'grid-in',
      width: 200,
      bind: {
        selection: '{selection}',
        store: '{incoming}'
      },
      columns: [
        {
          xtype: 'gridcolumn',
          resizable: false,
          sortable: false,
          dataIndex: 'html_text',
          hideable: false,
          flex: 1,
          bind: {
            text: '{i18n.document.motion.incoming}'
          }
        }
      ]
    },
    {
      xtype: 'gridpanel',
      region: 'center',
      itemId: 'grid-out',
      bodyBorder: false,
      bind: {
        selection: '{outSelection}',
        store: '{outgoing}'
      },
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.document.status.motionStatusIcon(value, record);
          },
          resizable: false,
          width: 28,
          sortable: false,
          dataIndex: 'status',
          hideable: false
        },
        {
          xtype: 'gridcolumn',
          width: 180,
          sortable: false,
          dataIndex: 'receiverName',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.receiver}'
          }
        },
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return record.get('send_type_name');
          },
          sortable: false,
          dataIndex: 'send_type_id',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.send_type}'
          },
          editor: {
            xtype: 'combobox',
            editable: false,
            displayField: 'html_name',
            valueField: 'id',
            bind: {
              store: '{responseTypes}'
            }
          }
        },
        {
          xtype: 'gridcolumn',
          width: 200,
          sortable: false,
          dataIndex: 'motion_text',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.motion_text}'
          },
          editor: {
            xtype: 'textfield'
          }
        },
        {
          xtype: 'gridcolumn',
          sortable: false,
          dataIndex: 'due_date',
          formatter: 'date("d/m/Y")',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.due_date}'
          },
          editor: {
            xtype: 'datefield',
            format: 'd/m/Y'
          }
        }
      ],
      viewConfig: {
        getRowClass: function(record, rowIndex, rowParams, store) {
          var status = record.get('status');
          return helpers.document.status.motionStatusRowClass(status, record);
        }
      },
      plugins: [
        {
          ptype: 'cellediting',
          clicksToEdit: 1
        }
      ],
      listeners: {
        beforecellcontextmenu: 'showOutMotionsContextMenu'
      }
    }
  ],
  listeners: {
    beforerender: 'onWindowBeforeRender',
    motionchange: 'onOutgoingMotionChange'
  },
  dockedItems: [
    {
      xtype: 'toolbar',
      flex: 1,
      dock: 'bottom',
      autoScroll: true,
      items: [
        {
          xtype: 'button',
          handler: function(button, e) {
            var view = this.up('documentmotionsassigneeadddialog');
            var dialog = helpers.party.getPartyDialog(function(assignees) {
              view.getController().addReceivers(assignees);
            });
            dialog.show();
          },
          bind: {
            text: '{i18n.document.motion.actions.add_assignee}'
          }
        },
        {
          xtype: 'tbspacer',
          flex: 1
        },
        {
          xtype: 'button',
          handler: function(button, e) {
            var dialog = this.up('documentmotionsassigneeadddialog');
            var vm = dialog.getViewModel();
            var document = vm.get('document');
            var documentId = document.id;
            helpers.api.document.motion.sendDraft(documentId, null, {
              success: function() {
                // dialog.refreshOutgrid();
                dialog.fireEvent('motionssent', true);
                dialog.close();
              }
            });
          },
          bind: {
            text: '{i18n.document.motion.actions.send_assigness}'
          }
        }
      ]
    }
  ],

  setDocument: function(doc) {
    var vm = this.getViewModel();
    vm.set('document', doc);
  },

  getDocument: function() {
    var vm = this.getViewModel();
    return vm.get('document');
  },

  refreshOutgrid: function() {
    this.down('#grid-out').getStore().load();
  }

});
/*
 * File: app/view/document/motions/AssigneeAddDialogViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneeAddDialogViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsassigneeadddialog',

  addReceivers: function(receivers) {
    var cntrl = this;
    if (receivers) {
      var tasks = [];
      for (var i = 0; i < receivers.length; i++) {
        var t = (function(receiver) {
          return function(callback) {
            cntrl.addReceiver(receiver, callback);
          };
        })(receivers[i]);
        tasks.push(t);
      }
      async.series(tasks);
    }
  },

  addReceiver: function(receiver, callback) {
    var view = this.getView();
    var vm = this.getViewModel();
    var extType = receiver.get('ext_type');
    var document = vm.get('document');
    var parentId = vm.get('parentId');
    var grid = view.down('#grid-out');

    helpers.api.document.motion.createDraft({
      params: {
        document_id: document.id,
        parent_id: parentId,
        receiver_id: receiver.id,
        receiver_type: extType,
        receiver_role: 'assignee'
      },
      success: function(motionData) {
        var motion = Ext.create('Tel100.model.document.Motion', motionData);
        var store = grid.getStore();
        store.add(motion);
        view.fireEvent('datachanged', view, 'add', motion);
        if (callback) {
          callback(null, motion);
        }
      }.bind(this),
      failure: function(error) {
        console.error(error);
      }.bind(this)
    });
  },

  showOutMotionsContextMenu: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    if (record && record.get('status') === helpers.document.status.DRAFT) {
      var ctrl = this;
      var panel = ctrl.getView();
      var gridMenu = Ext.create('Ext.menu.Menu', {
        items: [{
          text: i18n.document.motion.actions.delete_assignee,
          icon: '/images/delete.png',
          handler: function() {
            var vm = ctrl.getViewModel();
            var grid = panel.down('#grid-out');
            helpers.api.document.motion.deleteDraft(record.id, {
              success: function() {
                grid.getStore().remove(record);
                panel.fireEvent('datachanged', panel, 'delete');
              }
            });
          }
        }]
      });
      e.stopEvent();
      gridMenu.showAt(e.getXY());
    }
  },

  onWindowBeforeRender: function(component, eOpts) {
    var view = this.getView();
    var vm = this.getViewModel();

    // selection change
    var onChange = function(newVal, oldVal, binding) {
      if (newVal) {
        this.getView().fireEvent('motionchange', newVal);
      }
    };
    var options = { deep: true };
    vm.bind('{outSelection}', onChange, this, options);
  },

  onOutgoingMotionChange: function(motion) {
    if (motion.dirty) {
      var view = this.getView();
      var changes = motion.getChanges();
      helpers.api.document.motion.updateDraft(motion.id, {
        params: changes,
        success: function() {
          motion.commit();
          view.fireEvent('datachanged', view, 'update', motion);
          if(changes.send_type_id) { view.refreshOutgrid(); }
        }.bind(this),
        failure: function(message) {
          motion.reject();
          console.error(message);
        }
      });
    }
  },

  onStoreLoad: function(store, records, successful, eOpts) {
    var vm = this.getViewModel();
    vm.set('selection', records[0]);
  }

});
/*
 * File: app/view/document/motions/AssigneeAddDialogViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneeAddDialogViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsassigneeadddialog',


  data: {
    document: null,
    selection: null,
    outSelection: null
  },

  stores: {
    incoming: {
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          document_id: '{document.id}',
          mode: 'in'
        },
        url: '/api/documents/motion',
        reader: {
          type: 'json'
        }
      },
      listeners: {
        load: 'onStoreLoad'
      }
    },
    outgoing: {
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          document_id: '{document.id}',
          parent_id: '{selection.id}'
        },
        url: '/api/documents/motion/assignees_out',
        reader: {
          type: 'json'
        }
      },
      filters: {
        property: 'parent_id',
        value: '{parentId}'
      }
    },
    responseTypes: {
      autoLoad: true,
      model: 'Tel100.model.document.ResponseType',
      proxy: {
        type: 'ajax',
        extraParams: {
          type: 'send',
          role: 'assignee'
        },
        url: '/api/documents/response_types',
        reader: {
          type: 'json'
        }
      }
    }
  },
  formulas: {
    parentId: function(get) {
      var id = get('selection.id');
      if (typeof id === 'number') {
        return id;
      } else {
        return null;
      }
    }
  }

});
/*
 * File: app/view/document/motions/AssigneePanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneePanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentmotionsassigneepanel',


  controller: 'documentmotionsassigneepanel',
  viewModel: {
    type: 'documentmotionsassigneepanel'
  },
  layout: 'fit',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.motion.assignees} ({assigneeCount})'
  },
  items: [
    {
      xtype: 'gridpanel',
      bind: {
        selection: '{selection}',
        store: '{motions}'
      },
      viewConfig: {
        getRowClass: function(record, rowIndex, rowParams, store) {
          var status = record.get('status');
          return helpers.document.status.motionStatusRowClass(status, record);
        }
      },
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.document.status.motionStatusIcon(value, record);
          },
          draggable: false,
          resizable: false,
          width: 32,
          sortable: false,
          dataIndex: 'status',
          hideable: false,
          text: ''
        },
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.document.status.motionReceiverName(value, record);
          },
          draggable: false,
          width: 200,
          sortable: false,
          dataIndex: 'receiverName',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.receiver}'
          }
        },
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return record.get('send_type_name');
          },
          defaultWidth: 150,
          sortable: false,
          dataIndex: 'send_type_id',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.send_type}'
          },
          editor: {
            xtype: 'combobox',
            editable: false,
            displayField: 'name',
            valueField: 'id',
            bind: {
              store: '{responseTypes}'
            }
          }
        },
        {
          xtype: 'gridcolumn',
          draggable: false,
          width: 200,
          sortable: false,
          dataIndex: 'motion_text',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.motion_text}'
          },
          editor: {
            xtype: 'textfield'
          }
        },
        {
          xtype: 'gridcolumn',
          draggable: false,
          width: 100,
          sortable: false,
          dataIndex: 'due_date',
          formatter: 'date("d/m/Y")',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.due_date}'
          },
          editor: {
            xtype: 'datefield',
            format: 'd/m/Y'
          }
        }
      ],
      listeners: {
        beforeitemcontextmenu: 'onGridBeforeItemContextMenu'
      },
      plugins: [
        {
          ptype: 'cellediting',
          clicksToEdit: 1
        }
      ]
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefreshToolClick'
      }
    },
    {
      xtype: 'tool',
      type: 'plus',
      listeners: {
        click: 'onAddToolClick'
      }
    }
  ],
  listeners: {
    beforerender: {
      fn: 'onBeforeRender',
      scope: 'controller'
    }
  },

  onGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    if (record.get('status') === helpers.document.status.DRAFT) {
      var gridMenu = Ext.create('Ext.menu.Menu', {
        items: [{
          text: i18n.document.motion.actions.delete_assignee,
          icon: '/images/delete.png',
          handler: function() {
            var view = dataview.up('documentmotionsassigneepanel');
            view.deleteItemAt(index);
          }
        }]
      });

      e.stopEvent();
      gridMenu.showAt(e.getXY());
    }
  },

  onRefreshToolClick: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onAddToolClick: function(tool, e, owner, eOpts) {
    var view = this;
    var dialog = helpers.party.getPartyDialog(function(assignees) {
      view.getController().addReceivers(assignees);
    });
    dialog.show();
  },

  refresh: function() {
    var vm = this.getViewModel();
    vm.getStore('motions').load();
  },

  initComponent: function() {
    this.callParent();
    var view = this;
    var viewModel = this.getViewModel();
    viewModel.bind('{motions}', function(store) {
      if (store) {
        store.view = view;
        store.viewModel = viewModel;
      }
    });
  },

  getGrid: function() {
    return this.down('gridpanel');
  },

  deleteItemAt: function(index) {
    var view = this;
    var store = view.getViewModel().getStore('motions');
    var item = store.getAt(index);
    helpers.api.document.motion.deleteDraft(item.id, {
      success: function() {
        view.refresh();
        view.fireEvent('datachanged', view, 'delete');
      }
    });
  }

});
/*
 * File: app/view/document/motions/AssigneePanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneePanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsassigneepanel',

  addReceiver: function(receiver, callback) {
    var view = this.getView();
    var grid = view.getGrid();
    var vm = this.getViewModel();
    var extType = receiver.get('ext_type');
    var document = vm.get('document');


    // XXX: do we need parent ID here?
    //
    // var parentId = grid.getViewModel().get('parentId');

    helpers.api.document.motion.createDraft({
      params: {
        document_id: document.id,
        // parent_id: parentId,
        parent_id: null,
        receiver_id: receiver.id,
        receiver_type: extType,
        receiver_role: 'assignee'
      },
      success: function(motionData) {
        var motion = Ext.create('Tel100.model.document.Motion', motionData);
        var store = grid.getStore();
        store.add(motion);
        view.fireEvent('datachanged', view, 'add', motion);
        if (callback) {
          callback(null, motion);
        }
      }.bind(this),
      failure: function(error) {
        console.error(error);
      }.bind(this)
    });
  },

  addReceivers: function(receivers) {
    var cntrl = this;
    if (receivers) {
      var tasks = [];
      for (var i = 0; i < receivers.length; i++) {
        var t = (function(receiver) {
          return function(callback) {
            cntrl.addReceiver(receiver, callback);
          }
        })(receivers[i]);
        tasks.push(t);
      }
      async.series(tasks);
    }
  },

  onBeforeRender: function(component, eOpts) {
    var view = this.getView();
    var vm = this.getViewModel();
    var onChange = function(newVal, oldVal, binding) {
      if (newVal && newVal.dirty) {
        var motion = newVal;
        var changes = motion.getChanges();
        helpers.api.document.motion.updateDraft(motion.id, {
          params: changes,
          success: function() {
            motion.commit();
            view.fireEvent('datachanged', view, 'update', motion);
            if (changes.send_type_id) {
              view.refresh();
            }
          }.bind(this),
          failure: function(message) {
            motion.reject();
            console.error(message);
          }
        });
      }
    };
    var options = { deep: true };
    vm.bind('{selection}', onChange, this, { deep: true });
  }

});
/*
 * File: app/view/document/motions/AssigneePanelViewController1.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneePanelViewController1', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionssigneepanel',

  addReceiver: function(receiver, callback) {
    var view = this.getView();
    var grid = view.getGrid();
    var vm = this.getViewModel();
    var extType = receiver.get('ext_type');
    var document = vm.get('document');


    // XXX: do we need parent ID here?
    //
    // var parentId = grid.getViewModel().get('parentId');

    helpers.api.document.motion.createDraft({
      params: {
        document_id: document.id,
        // parent_id: parentId,
        parent_id: null,
        receiver_id: receiver.id,
        receiver_type: extType,
        receiver_role: 'signee'
      },
      success: function(motionData) {
        var motion = Ext.create('Tel100.model.document.Motion', motionData);
        var store = grid.getStore();
        store.add(motion);
        view.fireEvent('datachanged', view, 'add', motion);
        if (callback) {
          callback(null, motion);
        }
      }.bind(this),
      failure: function(error) {
        console.error(error);
      }.bind(this)
    });
  },

  addReceivers: function(receivers) {
    var cntrl = this;
    if (receivers) {
      var tasks = [];
      for (var i = 0; i < receivers.length; i++) {
        var t = (function(receiver) {
          return function(callback) {
            cntrl.addReceiver(receiver, callback);
          }
        })(receivers[i]);
        tasks.push(t);
      }
      async.series(tasks);
    }
  },

  onBeforeRender: function(component, eOpts) {
    var view = this.getView();
    var vm = this.getViewModel();
    var onChange = function(newVal, oldVal, binding) {
      if (newVal && newVal.dirty) {
        var motion = newVal;
        var changes = motion.getChanges();
        helpers.api.document.motion.updateDraft(motion.id, {
          params: changes,
          success: function() {
            motion.commit();
            view.fireEvent('datachanged', view, 'update', motion);
            if (changes.send_type_id) { view.refresh(); }
          }.bind(this),
          failure: function(message) {
            motion.reject();
            console.error(message);
          }
        });
      }
    };
    var options = { deep: true };
    vm.bind('{selection}', onChange, this, { deep: true });
  }

});
/*
 * File: app/view/document/motions/AssigneePanelViewController2.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneePanelViewController2', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsauthorpanel',

  addReceiver: function(receiver, callback) {
    var view = this.getView();
    var grid = view.getGrid();
    var vm = this.getViewModel();
    var extType = receiver.get('ext_type');
    var document = vm.get('document');


    // XXX: do we need parent ID here?
    //
    // var parentId = grid.getViewModel().get('parentId');

    helpers.api.document.motion.createDraft({
      params: {
        document_id: document.id,
        // parent_id: parentId,
        parent_id: null,
        receiver_id: receiver.id,
        receiver_type: extType,
        receiver_role: 'author'
      },
      success: function(motionData) {
        var motion = Ext.create('Tel100.model.document.Motion', motionData);
        var store = grid.getStore();
        store.add(motion);
        view.fireEvent('datachanged', view, 'add', motion);
        if (callback) {
          callback(null, motion);
        }
      }.bind(this),
      failure: function(error) {
        console.error(error);
      }.bind(this)
    });
  },

  addReceivers: function(receivers) {
    var cntrl = this;
    if (receivers) {
      var tasks = [];
      for (var i = 0; i < receivers.length; i++) {
        var t = (function(receiver) {
          return function(callback) {
            cntrl.addReceiver(receiver, callback);
          }
        })(receivers[i]);
        tasks.push(t);
      }
      async.series(tasks);
    }
  },

  onBeforeRender: function(component, eOpts) {
    var view = this.getView();
    var vm = this.getViewModel();
    var onChange = function(newVal, oldVal, binding) {
      if (newVal && newVal.dirty) {
        var motion = newVal;
        var changes = motion.getChanges();
        helpers.api.document.motion.updateDraft(motion.id, {
          params: changes,
          success: function() {
            motion.commit();
            view.fireEvent('datachanged', view, 'update', motion);
            if (changes.send_type_id) { view.refresh(); }
          }.bind(this),
          failure: function(message) {
            motion.reject();
            console.error(message);
          }
        });
      }
    };
    var options = { deep: true };
    vm.bind('{selection}', onChange, this, { deep: true });
  }

});
/*
 * File: app/view/document/motions/AssigneePanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneePanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsassigneepanel',


  data: {
    assigneeCount: 0,
    selection: null
  },

  stores: {
    motions: {
      onStoreChanges: function() {
        var store = this;
        this.viewModel.set('assigneeCount', store.getCount());
        this.view.fireEvent('listchanged', store);
      },
      listeners: {
        datachanged: function() {
          this.onStoreChanges();
        }
      },
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          mode: 'out',
          role: 'assignee',
          document_id: '{document.id}'
        },
        url: '/api/documents/motion',
        reader: {
          type: 'json'
        }
      }
    },
    responseTypes: {
      autoLoad: true,
      model: 'Tel100.model.document.ResponseType',
      proxy: {
        type: 'ajax',
        extraParams: {
          type: 'send',
          role: 'assignee'
        },
        url: '/api/documents/response_types',
        reader: {
          type: 'json'
        }
      }
    }
  }

});
/*
 * File: app/view/document/motions/AssigneePanelViewModel1.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneePanelViewModel1', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionssigneepanel',


  data: {
    assigneeCount: 0,
    selection: null
  },

  stores: {
    motions: {
      onStoreChanges: function() {
        var store = this;
        this.viewModel.set('assigneeCount', store.getCount());
        this.view.fireEvent('listchanged', store);
      },
      listeners: {
        datachanged: function() {
          this.onStoreChanges();
        }
      },
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          mode: 'out',
          role: 'signee',
          document_id: '{document.id}'
        },
        url: '/api/documents/motion',
        reader: {
          type: 'json'
        }
      }
    }
  }

});
/*
 * File: app/view/document/motions/AssigneePanelViewModel2.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AssigneePanelViewModel2', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsauthorpanel',


  data: {
    assigneeCount: 0,
    selection: null
  },

  stores: {
    motions: {
      onStoreChanges: function() {
        var store = this;
        this.viewModel.set('assigneeCount', store.getCount());
        this.view.fireEvent('listchanged', store);
      },
      listeners: {
        datachanged: function() {
          this.onStoreChanges();
        }
      },
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          mode: 'out',
          role: 'author',
          document_id: '{document.id}'
        },
        url: '/api/documents/motion',
        reader: {
          type: 'json'
        }
      }
    },
    responseTypes: {
      autoLoad: true,
      model: 'Tel100.model.document.ResponseType',
      proxy: {
        type: 'ajax',
        extraParams: {
          type: 'send'
        },
        url: '/api/documents/response_types',
        reader: {
          type: 'json'
        }
      }
    }
  }

});
/*
 * File: app/view/document/motions/AuthorPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.AuthorPanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentmotionsauthorpanel',


  controller: 'documentmotionsauthorpanel',
  viewModel: {
    type: 'documentmotionsauthorpanel'
  },
  layout: 'fit',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.motion.authors} ({assigneeCount})'
  },
  items: [
    {
      xtype: 'gridpanel',
      bind: {
        selection: '{selection}',
        store: '{motions}'
      },
      viewConfig: {
        getRowClass: function(record, rowIndex, rowParams, store) {
          var status = record.get('status');
          return helpers.document.status.motionStatusRowClass(status, record);
        }
      },
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.document.status.motionStatusIcon(value, record);
          },
          draggable: false,
          resizable: false,
          width: 32,
          sortable: false,
          dataIndex: 'status',
          hideable: false,
          text: ''
        },
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.document.status.motionReceiverName(value, record);
          },
          draggable: false,
          width: 200,
          sortable: false,
          dataIndex: 'receiverName',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.receiver}'
          }
        },
        {
          xtype: 'gridcolumn',
          draggable: false,
          width: 200,
          sortable: false,
          dataIndex: 'motion_text',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.motion_text}'
          },
          editor: {
            xtype: 'textfield'
          }
        },
        {
          xtype: 'gridcolumn',
          draggable: false,
          width: 100,
          sortable: false,
          dataIndex: 'due_date',
          formatter: 'date("d/m/Y")',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.due_date}'
          },
          editor: {
            xtype: 'datefield',
            format: 'd/m/Y'
          }
        }
      ],
      listeners: {
        beforeitemcontextmenu: 'onGridBeforeItemContextMenu'
      },
      plugins: [
        {
          ptype: 'cellediting',
          clicksToEdit: 1
        }
      ]
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefreshToolClick'
      }
    },
    {
      xtype: 'tool',
      type: 'plus',
      listeners: {
        click: 'onAddToolClick'
      }
    }
  ],
  listeners: {
    beforerender: {
      fn: 'onBeforeRender',
      scope: 'controller'
    }
  },

  onGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    if (record.get('status') === helpers.document.status.DRAFT) {
      var gridMenu = Ext.create('Ext.menu.Menu', {
        items: [{
          text: i18n.document.motion.actions.delete_author,
          icon: '/images/delete.png',
          handler: function() {
            var view = dataview.up('documentmotionsauthorpanel');
            view.deleteItemAt(index);
          }
        }]
      });

      e.stopEvent();
      gridMenu.showAt(e.getXY());
    }
  },

  onRefreshToolClick: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onAddToolClick: function(tool, e, owner, eOpts) {
    var view = this;
    var dialog = helpers.party.getPartyDialog(function(assignees) {
      view.getController().addReceivers(assignees);
    });
    dialog.show();
  },

  refresh: function() {
    var vm = this.getViewModel();
    vm.getStore('motions').load();
  },

  initComponent: function() {
    this.callParent();
    var view = this;
    var viewModel = this.getViewModel();
    viewModel.bind('{motions}', function(store) {
      if (store) {
        store.view = view;
        store.viewModel = viewModel;
      }
    });
  },

  getGrid: function() {
    return this.down('gridpanel');
  },

  deleteItemAt: function(index) {
    var view = this;
    var store = view.getViewModel().getStore('motions');
    var item = store.getAt(index);
    helpers.api.document.motion.deleteDraft(item.id, {
      success: function() {
        view.refresh();
        view.fireEvent('datachanged', view, 'delete');
      }
    });
  }

});
/*
 * File: app/view/document/motions/InGrid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.InGrid', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.documentmotionsingrid',


  config: {
    selection: null
  },

  viewModel: {
    type: 'documentmotionsingrid'
  },
  publishes: [
    'selection'
  ],
  bodyBorder: false,

  bind: {
    selection: '{selection}',
    store: '{motions}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.status.motionStatusIcon(value, record);
      },
      draggable: false,
      width: 28,
      sortable: false,
      dataIndex: 'status',
      emptyCellText: '',
      hideable: false
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        if (record.get('type') === 'motion') {
          return value;
        } else {
          var vm = this.getViewModel();
          var doc = vm.get('document');
          var numb = doc.get('docnumber');
          var senderName = doc.get('sender_name');
          return '<strong>#' + numb + '</strong>: ' + senderName;
        }
      },
      draggable: false,
      width: 200,
      sortable: false,
      dataIndex: 'senderName',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.sender}'
      }
    },
    {
      xtype: 'gridcolumn',
      draggable: false,
      width: 200,
      sortable: false,
      dataIndex: 'motion_text',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.motion_text}'
      }
    },
    {
      xtype: 'gridcolumn',
      draggable: false,
      width: 100,
      sortable: false,
      dataIndex: 'due_date',
      formatter: 'date("d/m/Y")',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.due_date}'
      }
    }
  ],
  viewConfig: {
    getRowClass: function(record, rowIndex, rowParams, store) {
      var status = record.get('status');
      return helpers.document.status.motionStatusRowClass(status, record);
    }
  },

  refresh: function() {
    var self = this;
    self.setLoading(true);
    this.getStore().load({
      callback: function() {
        self.setLoading(false);
      }
    });
  },

  initComponent: function() {
    this.callParent();
    var self = this;
    var vm = this.getViewModel();
    vm.bind('{selection}', function(motion) {
      vm.set('activeMotion', self.getActiveMotion());
    });
    vm.bind('{motions}', function(store) {
      store.on('load', function() {
        vm.set('activeMotion', self.getActiveMotion({ store: store }));
      });
    });
  },

  getActiveMotion: function(opts) {
    var vm = this.getViewModel();
    var selection = vm.get('selection');
    if (selection) {
      return selection;
    } else {
      var store = (opts && opts.store) || this.getStore();
      if (store && store.getCount() > 0) {
        return store.getAt(0);
      }
      return null;
    }
  }

});
/*
 * File: app/view/document/motions/InGridViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.InGridViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsingrid'
});
/*
 * File: app/view/document/motions/InGridViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.InGridViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsingrid',


  data: {
    selection: null,
    activeMotion: null
  },

  stores: {
    motions: {
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          mode: 'in',
          document_id: '{document.id}'
        },
        url: '/api/documents/motion',
        reader: {
          type: 'json'
        }
      }
    }
  }

});
/*
 * File: app/view/document/motions/InPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.InPanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentmotionsinpanel',


  viewModel: {
    type: 'documentmotionsinpanel'
  },
  border: false,
  layout: 'fit',
  bodyBorder: false,

  bind: {
    title: '{i18n.document.motion.inMotions}'
  },
  dockedItems: [
    {
      xtype: 'toolbar',
      dock: 'top',
      items: [
        {
          xtype: 'button',
          handler: function(button, e) {
            var panel = this.up('documentmotionsinpanel');
            var grid = panel.down('documentmotionsingrid');
            grid.refresh();
          },
          bind: {
            text: '{i18n.ui.refresh}'
          }
        }
      ]
    }
  ],
  items: [
    {
      xtype: 'documentmotionsingrid'
    }
  ],

  initComponent: function() {
    this.callParent();
    var self = this;
    var grid = this.down('documentmotionsingrid');
    var vm = grid.getViewModel();
    vm.bind('{activeMotion}', function(motion) {
      self.fireEvent('motionchanged', motion);
    });
  },

  getActiveMotion: function() {
    var grid = this.down('documentmotionsingrid');
    return grid.getActiveMotion();
  }

});
/*
 * File: app/view/document/motions/InPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.InPanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsinpanel'
});
/*
 * File: app/view/document/motions/InPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.InPanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsinpanel',

  data: {
    selection: null
  }

});
/*
 * File: app/view/document/motions/MotionQuickView.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.MotionQuickView', {
  extend: 'Ext.container.Container',
  alias: 'widget.documentmotionsmotionquickview',


  viewModel: {
    type: 'documentmotionsmotionquickview'
  },
  autoScroll: true,
  layout: 'form',

  items: [
    {
      xtype: 'displayfield',
      shrinkWrap: 2,
      style: 'height: inherit',
      bind: {
        value: '{sender}'
      }
    },
    {
      xtype: 'displayfield',
      shrinkWrap: 2,
      style: 'height: inherit',
      bind: {
        value: '{receiver}'
      }
    }
  ],

  getMotion: function() {
    this.getViewModel().get('motion');
  },

  setMotion: function(motion) {
    this.getViewModel().set('motion', motion);
  }

});
/*
 * File: app/view/document/motions/MotionQuickViewViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.MotionQuickViewViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsmotionquickview'
});
/*
 * File: app/view/document/motions/MotionQuickViewViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.MotionQuickViewViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsmotionquickview',


  data: 'motion: null',

  formulas: {
    sender: function(get) {
      var type = get('motion.type');
      var status = get('motion.status');
      if (type === 'motion') {
        var senderName = get('motion.sender');
        var sendType = get('motion.send_type');
        var receivedAt = get('motion.received_at');
        return [
        '<strong>' + senderName + '</strong>, ',
        '<span class="text-muted">' + sendType + '</span> ',
        '<span class="text-danger">' + receivedAt + '</span>'
        ].join('');
      } else {
        var doc = get('document');
        var status = doc.get('status');
        var senderName = doc.get('sender_name');
        var docnumber = doc.get('docnumber');
        var decor = helpers.document.status.statusDecoration(status);
        var sentAt = doc.get('sent_at_f');
        return [
        '<span class="' + decor.style + '">',
        '<i class="fa ' + decor.icon + '"></i> ',
        '#<strong>' + docnumber + '</strong> ',
        senderName + ' ',
        '<span class="text-danger">' + (sentAt || '') + '</span>',
        '</span>'
        ].join('');
      }
    },
    receiver: function(get) {
      var type = get('motion.type');
      var status = get('motion.status');
      if (type === 'motion') {
        var decor = helpers.document.status.statusDecoration(status);
        var receiverName = get('motion.receiver');
        var responseType = get('motion.response_type');
        var completedAt = get('motion.completed_at');
        return [
        '<span class="' + decor.style + '">',
        '<i class="fa ' + decor.icon + '"></i> ',
        '<strong>' + receiverName + '</strong>',
        ( completedAt ? ', <span class="text-muted">' + responseType + '</span> ' : ''),
        '<span class="text-danger">' + (completedAt || '') + '</span>',
        '</span>'
        ].join('');
      } else {
        return '';
      }
    }
  }

});
/*
 * File: app/view/document/motions/OutGrid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.OutGrid', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.documentmotionsoutgrid',


  config: {
    hasDraftMotion: false
  },

  viewModel: {
    type: 'documentmotionsoutgrid'
  },
  publishes: [
    'selection',
    'hasDraftMotion'
  ],

  bind: {
    store: '{motions}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.status.motionStatusIcon(value, record);
      },
      resizable: false,
      width: 28,
      sortable: false,
      dataIndex: 'status',
      hideable: false
    },
    {
      xtype: 'gridcolumn',
      width: 48,
      sortable: false,
      align: 'right',
      dataIndex: 'ordering',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.orderingShort}'
      },
      editor: {
        xtype: 'numberfield',
        decimalPrecision: 0,
        maxValue: 999,
        minValue: 1
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var receiver = record.get('receiver');
        if (receiver && receiver.ext_type == 'hr.Organization') {
          return '<i class="fa fa-bank"></i> ' + value;
        } else {
          return '<i class="fa fa-user"></i> ' + value;
        }
      },
      width: 200,
      sortable: false,
      dataIndex: 'receiverName',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.receiver}'
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return i18n.document.role[value];
      },
      width: 110,
      sortable: false,
      dataIndex: 'receiver_role',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.receiver_role}'
      },
      editor: {
        xtype: 'combobox',
        editable: false,
        displayField: 'localeField',
        valueField: 'name',
        bind: {
          store: '{roles}'
        }
      }
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return record.get('send_type_name');
      },
      width: 150,
      sortable: false,
      dataIndex: 'send_type_id',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.send_type}'
      },
      editor: {
        xtype: 'combobox',
        editable: false,
        displayField: 'html_name',
        valueField: 'id',
        bind: {
          store: '{responseTypes}'
        }
      }
    },
    {
      xtype: 'gridcolumn',
      width: 200,
      sortable: false,
      dataIndex: 'motion_text',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.motion_text}'
      },
      editor: {
        xtype: 'textfield'
      }
    },
    {
      xtype: 'gridcolumn',
      width: 100,
      sortable: false,
      dataIndex: 'due_date',
      formatter: 'date("d/m/Y")',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.due_date}'
      },
      editor: {
        xtype: 'datefield',
        altFormats: '',
        format: 'd/m/Y'
      }
    }
  ],
  viewConfig: {
    getRowClass: function(record, rowIndex, rowParams, store) {
      var status = record.get('status');
      return helpers.document.status.motionStatusRowClass(status, record);
    }
  },
  plugins: [
    {
      ptype: 'cellediting',
      clicksToEdit: 1
    }
  ],

  refresh: function() {
    var vm = this.getViewModel();
    var parentId = vm.get('parentId');
    var store = this.getStore();

    /// XXX isEmptyStore is not listed as a API method
    if (!store.isEmptyStore) {
      var self = this;
      self.setLoading(true);
      store.load({
        params: { parent_id: parentId },
        callback: function() {
          self.setLoading(false);
        }
      });
    }
  },

  initComponent: function() {
    this.callParent();
    var vm = this.getViewModel();
    // setting view model for the motions store
    vm.bind('{motions}', function(store) {
      if (store) {
        store.viewModel = this;
      }
    });
  }

});
/*
 * File: app/view/document/motions/OutGridViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.OutGridViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsoutgrid'
});
/*
 * File: app/view/document/motions/OutGridViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.OutGridViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsoutgrid',


  data: {
    parentId: null
  },

  stores: {
    motions: {
      onStoreChanges: function() {
        var hasDraftMotion = false;
        for(var i = 0; i < this.getCount(); i++) {
          var motion = this.getAt(i);
          if (motion.get('status') === helpers.document.status.DRAFT) {
            hasDraftMotion = true;
            break;
          }
        }
        if (this.viewModel) {
          this.viewModel.set('hasDraftMotion', hasDraftMotion);
        }
      },
      listeners: {
        update: function() {
          this.onStoreChanges();
        },
        remove: function() {
          this.onStoreChanges();
        },
        datachanged: function() {
          this.onStoreChanges();
        }
      },
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          mode: 'out',
          document_id: '{document.id}'
        },
        url: '/api/documents/motion',
        reader: {
          type: 'json'
        }
      }
    },
    roles: {
      data: [
        {
          name: 'assignee'
        },
        {
          name: 'signee'
        },
        {
          name: 'author'
        }
      ],
      fields: [
        {
          name: 'name'
        },
        {
          calculate: function(data) {
            return i18n.document.role[data.name];
          },
          name: 'localeField'
        }
      ]
    },
    responseTypes: {
      autoLoad: true,
      model: 'Tel100.model.document.ResponseType',
      proxy: {
        type: 'ajax',
        extraParams: {
          type: 'send'
        },
        url: '/api/documents/response_types',
        reader: {
          type: 'json'
        }
      }
    }
  }

});
/*
 * File: app/view/document/motions/OutPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.OutPanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentmotionsoutpanel',


  controller: 'documentmotionsoutpanel',
  viewModel: {
    type: 'documentmotionsoutpanel'
  },
  layout: 'border',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.base.ui.motionsTabTitle}'
  },
  dockedItems: [
    {
      xtype: 'toolbar',
      dock: 'top',
      items: [
        {
          xtype: 'button',
          handler: function(button, e) {
            var panel = this.up('documentmotionsoutpanel');
            panel.refresh();
          },
          bind: {
            text: '{i18n.ui.refresh}',
            tooltip: '{i18n.ui.refresh}'
          }
        },
        {
          xtype: 'button',
          handler: function(button, e) {
            var view = this.up('documentmotionsoutpanel');
            var dialog = helpers.party.getPartyDialog(function(assignees) {
              view.getController().addReceivers(assignees);
            });
            dialog.show();
          },
          cls: 'success-button',
          bind: {
            text: '{i18n.ui.add_short}',
            tooltip: '{i18n.ui.add}'
          }
        },
        {
          xtype: 'button',
          handler: function(button, e) {
            var panel = this.up('documentmotionsoutpanel');
            var vm = panel.getViewModel();
            if (vm.get('sendButtonDisabled')) { return; }
            var title = i18n.ui.confirmTitle;
            var message = i18n.document.motion.sendMotionsConfirm;
            Ext.Msg.confirm(title, message, function(resp) {
              if (resp === 'yes') {
                var parentId = panel.getParentId();
                var document = vm.get('document');
                var documentId = document.id;
                helpers.api.document.motion.sendDraft(documentId, parentId, {
                  success: function() {
                    panel.refresh();
                  }
                });
              }
            });
          },
          bind: {
            disabled: '{sendButtonDisabled}',
            hidden: '{sendButtonDisabled}',
            text: '{i18n.document.motion.sendMotions}'
          }
        },
        {
          xtype: 'tbfill'
        },
        {
          xtype: 'button',
          handler: function(button, e) {
            var panel = this.up('documentmotionsoutpanel');
            var vm = panel.getViewModel();
            var selection = vm.get('selection');
            if (selection) {
              var msg = i18n.ui.destroyConfirm;
              var title = i18n.ui.confirmTitle;
              var grid = panel.down('documentmotionsoutgrid');
              var successFunction = function() {
                grid.getStore().remove(selection);
                panel.fireEvent('datachanged', panel, 'delete');
              };
              Ext.Msg.confirm(title, msg, function(resp) {
                if (resp === 'yes') {
                  helpers.api.document.motion.deleteDraft(selection.id, {
                    success: successFunction
                  });
                }
              }.bind(this));
            }
          },
          cls: 'danger-button',
          bind: {
            disabled: '{deleteDraftButtonDisabled}',
            text: '{i18n.ui.destroy_short}',
            tooltip: '{i18n.ui.destroy}'
          }
        }
      ]
    }
  ],
  items: [
    {
      xtype: 'documentmotionsoutgrid',
      data: {
        outmode: true,
        basemotion: false
      },
      region: 'center',
      bind: {
        selection: '{selection}'
      }
    }
  ],
  listeners: {
    beforerender: {
      fn: 'onBeforeRender',
      scope: 'controller'
    },
    motionchange: {
      fn: 'onPanelMotionChange',
      scope: 'controller'
    },
    beforedestroy: {
      fn: 'onPanelBeforeDestroy',
      scope: 'controller'
    },
    draftmotionchanged: 'onDraftmotionChanged'
  },

  onDraftmotionChanged: function(hasDraftMotions) {
    var vm = this.getViewModel();
    vm.set('hasDraftMotions', hasDraftMotions);
  },

  refresh: function() {
    this.getGrid().refresh();
  },

  getGrid: function() {
    return this.down('documentmotionsoutgrid');
  },

  initComponent: function() {
    this.callParent();
    var gridVM = this.getGrid().getViewModel();
    var self = this;
    gridVM.bind('{hasDraftMotion}', function() {
      var draftMotion = gridVM.get('hasDraftMotion');
      self.fireEvent('draftmotionchanged', draftMotion);
    });
  },

  setParentId: function(id) {
    var grid = this.down('documentmotionsoutgrid');
    var vm = grid.getViewModel();
    vm.set('parentId', id);
  },

  getParentId: function() {
    var grid = this.down('documentmotionsoutgrid');
    var vm = grid.getViewModel();
    return vm.get('parentId');
  }

});
/*
 * File: app/view/document/motions/OutPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.OutPanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsoutpanel',


  addReceiver: function(receiver) {
    var extType = receiver.get('ext_type');
    var document = this.getViewModel().get('document');
    var grid = this.getView().getGrid();
    var parentId = grid.getViewModel().get('parentId');
    helpers.api.document.motion.createDraft({
      params: {
        document_id: document.id,
        receiver_id: receiver.id,
        receiver_role: 'assignee',
        ordering: 1,
        parent_id: parentId,
        receiver_type: receiver.get('ext_type')
      },
      success: function(motionData) {
        var motion = Ext.create('Tel100.model.document.Motion', motionData);
        var view = this.getView();
        var grid = view.down('documentmotionsoutgrid');
        var store = grid.getStore();
        store.add(motion);
        view.fireEvent('datachanged', view, 'add', motion);
      }.bind(this),
      failure: function(error) {
        console.error(error);
      }.bind(this)
    });
  },

  addReceivers: function(receivers) {
    if (receivers) {
      for (var i = 0; i < receivers.length; i++) {
        this.addReceiver( receivers[i]);
      }
    }
  },

  onBeforeRender: function(component, eOpts) {
    var view = this.getView();
    var vm = this.getViewModel();

    // selection change
    var onChange = function(newVal, oldVal, binding) {
      if (newVal) {
        this.getView().fireEvent('motionchange', newVal);
      }
    };
    var options = { deep: true };
    vm.bind('{selection}', onChange, this, options);
  },

  onPanelMotionChange: function(motion) {
    if (motion.dirty) {
      var view = this.getView();
      var changes = motion.getChanges();
      helpers.api.document.motion.updateDraft(motion.id, {
        params: changes,
        success: function() {
          motion.commit();
          view.fireEvent('datachanged', view, 'update', motion);
          if(changes.send_type_id) { view.getGrid().refresh(); }
        }.bind(this),
        failure: function(message) {
          motion.reject();
          console.error(message);
        }
      });
    }
  },

  onPanelBeforeDestroy: function(component, eOpts) {
    if (this.receiverDialog) {
      this.receiverDialog.destroy();
    }
  }

});
/*
 * File: app/view/document/motions/OutPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.OutPanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsoutpanel',


  data: {
    motionbase: true,
    selection: null
  },

  formulas: {
    deleteDraftButtonDisabled: function(get) {
      var selection = get('selection');
      if (selection) {
        var status = selection.get('status');
        return status !== helpers.document.status.DRAFT;
      } else {
        return true;
      }
    },
    sendButtonDisabled: function(get) {
      var docstatus = get('document.status');
      if (docstatus === helpers.document.status.DRAFT) {
        return true;
      } else {
        return !get('hasDraftMotions');
      }
    }
  }

});
/*
 * File: app/view/document/motions/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.Panel', {
  extend: 'Ext.container.Container',
  alias: 'widget.documentmotionspanel',


  viewModel: {
    type: 'documentmotionspanel'
  },
  layout: 'fit',

  items: [
    {
      xtype: 'tabpanel',
      activeTab: 0,
      items: [
        {
          xtype: 'panel',
          autoScroll: true,
          bodyPadding: 5,
          layout: {
            type: 'vbox',
            align: 'stretch'
          },
          bind: {
            title: '<i class="fa fa-send"></i> {i18n.document.motion.general}'
          },
          items: [
            {
              xtype: 'textfield',
              flex: 0,
              readOnly: true,
              bind: {
                fieldLabel: '{i18n.document.motion.sender}',
                value: '{motion.senderName}'
              }
            },
            {
              xtype: 'textfield',
              flex: 0,
              readOnly: true,
              bind: {
                fieldLabel: '{i18n.document.motion.receiver}',
                value: '{motion.receiverName}'
              }
            },
            {
              xtype: 'textfield',
              editable: false,
              bind: {
                fieldLabel: '{i18n.document.motion.send_type}',
                value: '{motion.send_type_name}'
              }
            },
            {
              xtype: 'textareafield',
              readOnly: true,
              bind: {
                fieldLabel: '{i18n.document.motion.motion_text}',
                value: '{motion.motion_text}'
              }
            },
            {
              xtype: 'datefield',
              readOnly: true,
              format: 'd/m/Y',
              bind: {
                fieldLabel: '{i18n.document.motion.due_date}',
                value: '{motion.due_date}'
              }
            },
            {
              xtype: 'displayfield',
              renderer: function(value, displayField) {
                var view = displayField.up('documentmotionspanel');
                var vm = view.getViewModel();
                var motion = vm.get('motion');
                var responseType = motion && motion.get('resp_type_name');
                if (responseType) {
                  return value + ' - ' + responseType;
                } else {
                  return value;
                }
              },
              bind: {
                fieldLabel: '{i18n.document.motion.status}',
                value: '{motion.statusFull}'
              }
            },
            {
              xtype: 'textareafield',
              readOnly: true,
              bind: {
                fieldLabel: '{i18n.document.motion.response_text}',
                value: '{motion.response_text}'
              }
            }
          ]
        },
        {
          xtype: 'panel',
          autoScroll: true,
          defaults: {
            labelWidth: 150,
            // labelAlign: 'right'
          },
          bodyPadding: 5,
          layout: {
            type: 'vbox',
            align: 'stretch'
          },
          bind: {
            title: '<i class="fa fa-calendar"></i> {i18n.document.motion.times}'
          },
          items: [
            {
              xtype: 'datefield',
              readOnly: true,
              format: 'd/m/Y H:i:s',
              bind: {
                fieldLabel: '<i class="fa fa-circle-o"></i> {i18n.document.motion.created_at}',
                value: '{motion.created_at}'
              }
            },
            {
              xtype: 'datefield',
              readOnly: true,
              format: 'd/m/Y H:i:s',
              bind: {
                fieldLabel: '<i class="fa fa-edit"></i> {i18n.document.motion.updated_at}',
                value: '{motion.updated_at}'
              }
            },
            {
              xtype: 'label',
              height: 25
            },
            {
              xtype: 'datefield',
              readOnly: true,
              format: 'd/m/Y H:i:s',
              bind: {
                fieldLabel: '<i class="fa fa-send"></i> {i18n.document.motion.sent_at}',
                value: '{motion.sent_at}'
              }
            },
            {
              xtype: 'datefield',
              readOnly: true,
              format: 'd/m/Y H:i:s',
              bind: {
                fieldLabel: '<i class="fa fa-clock-o"></i> {i18n.document.motion.received_at}',
                value: '{motion.received_at}'
              }
            },
            {
              xtype: 'datefield',
              readOnly: true,
              format: 'd/m/Y H:i:s',
              bind: {
                fieldLabel: '<i class="fa fa-check"></i> {i18n.document.motion.completed_at}',
                value: '{motion.completed_at}'
              }
            }
          ]
        }
      ]
    }
  ],

  setMotion: function(motion) {
    var view = this;
    Ext.create('Tel100.model.document.Motion', { id : motion.id }).load({
      success: function(record, operation) {
        view.getViewModel().set('motion', record);
      },
      failure: function(record, operation) {
        console.log('cannot load motion');
      }
    });
  },

  getMotion: function() {
    return this.getViewModel().get('motion');
  }

});
/*
 * File: app/view/document/motions/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionspanel'
});
/*
 * File: app/view/document/motions/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionspanel',

  data: {
    motion: null
  }

});
/*
 * File: app/view/document/motions/Properties.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.Properties', {
  extend: 'Ext.window.Window',
  alias: 'widget.documentmotionsproperties',


  viewModel: {
    type: 'documentmotionsproperties'
  },
  height: 390,
  width: 550,
  layout: 'fit',

  bind: {
    title: '<i class="fa fa-truck"></i> {i18n.document.motion.properties}'
  },
  items: [
    {
      xtype: 'documentmotionspanel'
    }
  ],

  getPanel: function() {
    return this.down('documentmotionspanel');
  },

  getMotion: function() {
    return this.getPanel().getMotion();
  },

  setMotion: function(motion) {
    this.getPanel().setMotion(motion);
  }

});
/*
 * File: app/view/document/motions/PropertiesViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.PropertiesViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsproperties'
});
/*
 * File: app/view/document/motions/PropertiesViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.PropertiesViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsproperties'

});
/*
 * File: app/view/document/motions/ReceiversPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.ReceiversPanel', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.documentmotionsreceiverspanel',


  controller: 'documentmotionsreceiverspanel',
  viewModel: {
    type: 'documentmotionsreceiverspanel'
  },
  hideHeaders: true,
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.motion.receivers} ({receiverCount})',
    store: '{receivers}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.renderer.renderMotion(record, { as: 'receiver' });
      },
      dataIndex: 'name',
      text: 'name',
      flex: 1
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    },
    {
      xtype: 'tool',
      type: 'plus',
      listeners: {
        click: 'onAddAssignee'
      }
    }
  ],

  onRefresh: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onAddAssignee: function(tool, e, owner, eOpts) {
    var view = this;
    var vm = this.getViewModel();
    var dialog = Ext.create('Tel100.view.document.motions.AssigneeAddDialog', {
      modal: true,
    });
    dialog.setDocument(vm.get('document'));
    dialog.show();
    dialog.on('motionssent', function() {
      view.refresh();
      vm.get('document').load();
    });
  },

  onStoreLoad: function(store, records, successful, eOpts) {
    var vm = this.getViewModel();
    vm.set('receiverCount', this.getStore().count());
  },

  refresh: function() {
    this.getStore().load();
  }

});
/*
 * File: app/view/document/motions/ReceiversPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.ReceiversPanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsreceiverspanel',

  onStoreLoad: function(store, records, successful, eOpts) {

  }

});
/*
 * File: app/view/document/motions/ReceiversPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.ReceiversPanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsreceiverspanel',


  data: {
    receiverCount: 0
  },

  stores: {
    receivers: {
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          document_id: '{document.id}'
        },
        url: '/api/documents/motion/assignees',
        reader: {
          type: 'json'
        }
      },
      listeners: {
        load: 'onStoreLoad'
      }
    }
  }

});
/*
 * File: app/view/document/motions/ResultPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.ResultPanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentmotionsresultpanel',


  controller: 'documentmotionsresultpanel',
  viewModel: {
    type: 'documentmotionsresultpanel'
  },
  autoScroll: true,

  layout: {
    type: 'vbox',
    align: 'stretch',
    padding: 5
  },
  bind: {
    title: '{i18n.document.motion.resultPaneTitle}'
  },
  items: [
    {
      xtype: 'combobox',
      tpl: '<tpl for="."><div class="x-boundlist-item">{html_text}</div></tpl>',
      itemId: 'in-motions',
      editable: false,
      autoSelect: false,
      valueField: 'id',
      bind: {
        fieldLabel: '{i18n.document.comment.motion}',
        value: '{motionId}',
        store: '{motions}',
        selection: '{selection}'
      }
    },
    {
      xtype: 'checkboxfield',
      flex: 0,
      itemId: 'is-complete',
      bind: {
        hidden: '{hideComplete}',
        fieldLabel: '{i18n.document.comment.complete}',
        value: '{isResult}'
      }
    },
    {
      xtype: 'combobox',
      tpl: '<tpl for="."><div class="x-boundlist-item">{html_name}</div></tpl>',
      flex: 0,
      itemId: 'result-types',
      editable: false,
      autoSelect: false,
      displayField: 'name',
      valueField: 'id',
      bind: {
        hidden: '{hideResult}',
        fieldLabel: '{i18n.document.comment.result}',
        value: '{categoryId}',
        store: '{responseTypes}'
      }
    },
    {
      xtype: 'textareafield',
      flex: 0,
      itemId: 'comment-text',
      bind: {
        fieldLabel: '{i18n.document.comment.text}',
        value: '{text}'
      }
    },
    {
      xtype: 'button',
      margin: 8,
      width: 728,
      bind: {
        text: '{saveLabel}'
      },
      listeners: {
        click: 'onSaveClick'
      }
    },
    {
      xtype: 'documentrelationanswer',
      flex: 1
    }
  ],

  resetForm: function() {
    var motionsCombo = this.down('#in-motions');
    var typeCombo = this.down('#result-types');
    var completeCheck = this.down('#is-complete');
    var textField = this.down('#comment-text');
    // motionsCombo.select(motionsCombo.getStore().getAt(0));
    motionsCombo.getStore().load();
    typeCombo.select(typeCombo.getStore().getAt(0));
    textField.setValue('');
    completeCheck.setValue(false);
  }

});
/*
 * File: app/view/document/motions/ResultPanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.ResultPanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionsresultpanel',

  onSaveClick: function(button, e, eOpts) {
    var view = this.getView();
    var vm = this.getViewModel();

    var docId = vm.get('document').id;
    var motionId = vm.get('selection.id');
    if (typeof motionId !== 'number') { motionId = null; }
    var text = vm.get('text');
    var isComplete = vm.get('isResult');
    if (isComplete && vm.get('hideComplete')) { isComplete = false; }
    var responseTypeId = null;
    if (isComplete) { responseTypeId = vm.get('categoryId'); }

    var params = {
      document_id: docId,
      motion_id: motionId,
      is_result: isComplete,
      text: text,
      response_type_id: responseTypeId
    };

    if (!params.is_result && !params.text) {
      Ext.Msg.show({
        title: i18n.document.comment.errors.text_required_title,
        message: i18n.document.comment.errors.text_required,
        buttons: Ext.Msg.OK,
      });
      return;
    }

    view.setLoading(true);

    helpers.api.document.comment.create({
      params: params,
      success: function(data) {
        view.resetForm();
        view.setLoading(false);
        view.fireEvent('commentadded');
      },
      failure: function(error) {
        view.setLoading(false);
        console.error(error);
      }
    });
  },

  onMotionsStoreLoad: function(store, records, successful, eOpts) {
    var view = this.getView();
    var combo = view.down('#in-motions');
    var val = store.getAt(0);
    combo.select(val);
  },

  onResponseTypesStoreLoad: function(store, records, successful, eOpts) {
    var view = this.getView();
    var combo = view.down('#result-types');
    var val = store.getAt(0);
    combo.select(val);
  }

});
/*
 * File: app/view/document/motions/ResultPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.ResultPanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionsresultpanel',


  data: {
    motionId: null,
    isResult: false,
    categoryId: null,
    text: null,
    selection: null
  },

  stores: {
    motions: {
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          mode: 'in',
          document_id: '{document.id}'
        },
        url: '/api/documents/motion',
        reader: {
          type: 'json'
        }
      },
      listeners: {
        load: 'onMotionsStoreLoad'
      }
    },
    responseTypes: {
      autoLoad: true,
      model: 'Tel100.model.document.ResponseType',
      filters: {
        property: 'role',
        value: '{receiverRole}'
      },
      proxy: {
        type: 'ajax',
        extraParams: {
          type: 'response'
        },
        url: '/api/documents/response_types',
        reader: {
          type: 'json'
        }
      },
      listeners: {
        load: 'onResponseTypesStoreLoad'
      }
    }
  },
  formulas: {
    hideResult: function(get) {
      return !get('isResult');
    },
    hideComplete: function(get) {
      return get('selection.status') !== helpers.document.status.CURRENT;
    },
    saveLabel: function(get) {
      return get('isResult') ?
      i18n.document.comment.actions.saveResult :
      i18n.document.comment.actions.saveComment;
    },
    receiverRole: function(get) {
      return get('selection.receiver_role') || 'owner';
    }
  }

});
/*
 * File: app/view/document/motions/SignaturesViewer.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.SignaturesViewer', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.documentmotionssignaturesviewer',


  controller: 'documentmotionssignaturesviewer',
  viewModel: {
    type: 'documentmotionssignaturesviewer'
  },
  hideHeaders: true,
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.motion.signatures} ({signatureCount})',
    store: '{signatures}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var status = record.get('status');
        var decor = helpers.document.status.statusDecoration(status);
        var text = '<strong>' + value + '</strong>';
        var role = record.get('role');
        var roleName = i18n.document.role[role];
        text += ', <span class="text-muted">' + roleName + '</span>';
        var date = record.get('date');
        if (date) { text = text + ' &mdash; ' + date; }
        return [
        '<span class="' + decor.style + '">',
        '<i class="fa ' + decor.icon + '"></i> ',
        text,
        '</span>'
        ].join('');
      },
      dataIndex: 'name',
      text: 'name',
      flex: 1
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    }
  ],

  onRefresh: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  refresh: function() {
    this.getStore().load();
  },

  onStoreLoad: function(store, records, successful, eOpts) {
    var vm = this.getViewModel();
    vm.set('signatureCount', store.count());
  }

});
/*
 * File: app/view/document/motions/SignaturesViewerViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.SignaturesViewerViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionssignaturesviewer',

  onStoreLoad: function(store, records, successful, eOpts) {
    // XXX: actual implementation is in view
  }

});
/*
 * File: app/view/document/motions/SignaturesViewerViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.SignaturesViewerViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionssignaturesviewer',


  data: {
    signatureCount: 0
  },

  stores: {
    signatures: {
      autoLoad: true,
      model: 'Tel100.model.document.Motion',
      proxy: {
        type: 'ajax',
        extraParams: {
          document_id: '{document.id}'
        },
        url: '/api/documents/motion/signatures',
        reader: {
          type: 'json'
        }
      },
      listeners: {
        load: 'onStoreLoad'
      }
    }
  }

});
/*
 * File: app/view/document/motions/SigneePanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.SigneePanel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentmotionssigneepanel',


  controller: 'documentmotionssigneepanel',
  viewModel: {
    type: 'documentmotionssigneepanel'
  },
  layout: 'fit',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.motion.signees} ({assigneeCount})'
  },
  items: [
    {
      xtype: 'gridpanel',
      bind: {
        selection: '{selection}',
        store: '{motions}'
      },
      viewConfig: {
        getRowClass: function(record, rowIndex, rowParams, store) {
          var status = record.get('status');
          return helpers.document.status.motionStatusRowClass(status, record);
        }
      },
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.document.status.motionStatusIcon(value, record);
          },
          draggable: false,
          resizable: false,
          width: 32,
          sortable: false,
          dataIndex: 'status',
          hideable: false,
          text: ''
        },
        {
          xtype: 'gridcolumn',
          width: 48,
          sortable: false,
          align: 'right',
          dataIndex: 'ordering',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.orderingShort}'
          },
          editor: {
            xtype: 'numberfield',
            maxValue: 999,
            minValue: 1
          }
        },
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return helpers.document.status.motionReceiverName(value, record);
          },
          draggable: false,
          width: 200,
          sortable: false,
          dataIndex: 'receiverName',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.receiver}'
          }
        },
        {
          xtype: 'gridcolumn',
          draggable: false,
          width: 200,
          sortable: false,
          dataIndex: 'motion_text',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.motion_text}'
          },
          editor: {
            xtype: 'textfield'
          }
        },
        {
          xtype: 'gridcolumn',
          draggable: false,
          width: 100,
          sortable: false,
          dataIndex: 'due_date',
          formatter: 'date("d/m/Y")',
          hideable: false,
          bind: {
            text: '{i18n.document.motion.due_date}'
          },
          editor: {
            xtype: 'datefield',
            format: 'd/m/Y'
          }
        }
      ],
      listeners: {
        beforeitemcontextmenu: 'onGridBeforeItemContextMenu'
      },
      plugins: [
        {
          ptype: 'cellediting',
          clicksToEdit: 1
        }
      ]
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefreshToolClick'
      }
    },
    {
      xtype: 'tool',
      type: 'plus',
      listeners: {
        click: 'onAddToolClick'
      }
    }
  ],
  listeners: {
    beforerender: {
      fn: 'onBeforeRender',
      scope: 'controller'
    }
  },

  onGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
    if (record.get('status') === helpers.document.status.DRAFT) {
      var gridMenu = Ext.create('Ext.menu.Menu', {
        items: [{
          text: i18n.document.motion.actions.delete_signee,
          icon: '/images/delete.png',
          handler: function() {
            var view = dataview.up('documentmotionssigneepanel');
            view.deleteItemAt(index);
          }
        }]
      });

      e.stopEvent();
      gridMenu.showAt(e.getXY());
    }
  },

  onRefreshToolClick: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onAddToolClick: function(tool, e, owner, eOpts) {
    var view = this;
    var dialog = helpers.party.getPartyDialog(function(assignees) {
      view.getController().addReceivers(assignees);
    });
    dialog.show();
  },

  refresh: function() {
    var vm = this.getViewModel();
    vm.getStore('motions').load();
  },

  initComponent: function() {
    this.callParent();
    var view = this;
    var viewModel = this.getViewModel();
    viewModel.bind('{motions}', function(store) {
      if (store) {
        store.view = view;
        store.viewModel = viewModel;
      }
    });
  },

  getGrid: function() {
    return this.down('gridpanel');
  },

  deleteItemAt: function(index) {
    var view = this;
    var store = view.getViewModel().getStore('motions');
    var item = store.getAt(index);
    helpers.api.document.motion.deleteDraft(item.id, {
      success: function() {
        view.refresh();
        view.fireEvent('datachanged', view, 'delete');
      }
    });
  }

});
/*
 * File: app/view/document/motions/Tree.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.Tree', {
  extend: 'Ext.tree.Panel',
  alias: 'widget.documentmotionstree',


  config: {
    selection: null
  },

  viewModel: {
    type: 'documentmotionstree'
  },
  border: false,
  bodyBorder: false,
  bodyCls: 'x-tree-noicon',
  autoLoad: true,
  enableColumnHide: false,
  hideHeaders: true,
  rowLines: true,
  scroll: 'vertical',
  lines: false,
  useArrows: true,
  defaultListenerScope: true,

  bind: {
    selection: '{selection}',
    title: '{i18n.document.motion.tree}',
    store: '{motions}'
  },
  viewConfig: {

  },
  columns: [
    {
      xtype: 'treecolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var statusDecorator = function(status, isNew, text) {
          var decoration = helpers.document.status.statusDecoration(status);
          var icon;
          if (isNew && status === helpers.document.status.CURRENT) {
            icon = '<i class="text-danger fa fa-circle"></i>';
          } else {
            icon = '<i class="fa ' + decoration.icon + '"></i>';
          }
          return '<span class="' + decoration.style + '">' + ' ' + icon + ' ' + text + '</span>';
        };

        if (record.get('root')) {
          var grid = view.up('documentmotionstree');
          var vm = grid.getViewModel();
          var doc = vm.get('document');
          var status = doc.get('status');
          var roleName = i18n.document.role.creator;
          var txt = '#<strong>' + doc.get('docnumber') + '</strong>: ' + doc.get('sender_name') + ', <span class="text-muted">' + roleName + '</span>';
          return statusDecorator(status, false, txt);
        } else {
          //   var status = record.get('status');
          //   var isNew = record.get('is_new');
          //   var currentStatus = record.get('current_status');
          //   var txt;
          //   var role = record.get('receiver_role');
          //   if (currentStatus === '' || currentStatus === '--') {
          //     txt = '<strong>' + value + '</strong>, <span class="text-muted">' + i18n.document.role[role] + '</span>';
          //   } else {
          //     txt = '<strong>' + value + '</strong>, <span class="text-muted">' + i18n.document.role[role] + '</span> &mdash; ' + currentStatus;
          //   }
          //   return statusDecorator(status, isNew, txt);
          return helpers.document.renderer.renderMotion(record);
        }
      },
      dataIndex: 'receiver',
      text: 'Receiver',
      flex: 1
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onToolClick'
      }
    }
  ],
  listeners: {
    beforecellcontextmenu: 'onTreepanelBeforeCellContextMenu'
  },
  dockedItems: [
    {
      xtype: 'documentmotionsmotionquickview',
      resizable: true,
      style: 'background-color: #dfeaf2;',
      dock: 'bottom',
      bind: {
        motion: '{selection}',
        hidden: '{hideQuickProperties}'
      }
    }
  ],

  onToolClick: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onTreepanelBeforeCellContextMenu: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    if (record.get('type') === 'motion') {
      var gridMenu = Ext.create('Ext.menu.Menu', {
        items: [{
          text: i18n.document.motion.properties,
          icon: '/images/properties.png',
          handler: function() {
            var dialog = helpers.document.motion.getPropertiesDialog(record);
            dialog.show();
          }
        }]
      });
      e.stopEvent();
      gridMenu.showAt(e.getXY());
    }
  },

  refresh: function() {
    var vm = this.getViewModel();
    var store = vm.get('motions');
    store.load();
  }

});
/*
 * File: app/view/document/motions/TreeViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.TreeViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentmotionstree'
});
/*
 * File: app/view/document/motions/TreeViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.TreeViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentmotionstree',


  data: {
    selection: null
  },

  stores: {
    motions: {
      type: 'tree',
      rootVisible: true,
      root: {
        expanded: true
      },
      proxy: {
        type: 'ajax',
        extraParams: {
          document_id: '{document.id}'
        },
        url: '/api/documents/motion/tree',
        reader: {
          type: 'json'
        }
      },
      fields: [
        {
          name: 'id'
        },
        {
          name: 'sender'
        },
        {
          name: 'receiver'
        },
        {
          name: 'status'
        },
        {
          name: 'ordering'
        }
      ]
    }
  },
  formulas: {
    disableProperties: function(get) {
      return !get('selection');
    },
    hideQuickProperties: function(get) {
      return !get('selection');
    }
  }

});
/*
 * File: app/view/hr/party/Add.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.party.Add', {
  extend: 'Ext.window.Window',
  alias: 'widget.hrpartyadd',


  config: {
    buttonAlign: 'center'
  },

  controller: 'hrpartyadd',
  viewModel: {
    type: 'hrpartyadd'
  },
  resizable: false,
  width: 500,
  layout: 'fit',
  modal: true,

  bind: {
    title: '{i18n.hr.party.newparty}'
  },
  items: [
    {
      xtype: 'form',
      buttonAlign: 'center',
      bodyPadding: 0,
      header: false,
      title: 'My Form',
      url: '/api/hr/party/create',
      layout: {
        type: 'vbox',
        align: 'stretch'
      },
      items: [
        {
          xtype: 'tabpanel',
          activeTab: 0,
          items: [
            {
              xtype: 'panel',
              layout: 'form',
              title: 'KA',
              items: [
                {
                  xtype: 'textfield',
                  name: 'name_ka',
                  allowBlank: false,
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.name}'
                  }
                },
                {
                  xtype: 'textfield',
                  name: 'address_ka',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.address}'
                  }
                },
                {
                  xtype: 'textfield',
                  name: 'contact_ka',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.contact}'
                  }
                }
              ]
            },
            {
              xtype: 'panel',
              layout: 'form',
              title: 'RU',
              items: [
                {
                  xtype: 'textfield',
                  name: 'name_ru',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.name}'
                  }
                },
                {
                  xtype: 'textfield',
                  name: 'address_ru',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.address}'
                  }
                },
                {
                  xtype: 'textfield',
                  name: 'contact_ru',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.contact}'
                  }
                }
              ]
            },
            {
              xtype: 'panel',
              layout: 'form',
              title: 'EN',
              items: [
                {
                  xtype: 'textfield',
                  name: 'name_en',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.name}'
                  }
                },
                {
                  xtype: 'textfield',
                  name: 'address_en',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.address}'
                  }
                },
                {
                  xtype: 'textfield',
                  name: 'contact_en',
                  bind: {
                    fieldLabel: '{i18n.hr.party.fields.contact}'
                  }
                }
              ]
            }
          ]
        },
        {
          xtype: 'container',
          layout: 'form',
          items: [
            {
              xtype: 'textfield',
              name: 'identity',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.identity}'
              }
            },
            {
              xtype: 'textfield',
              name: 'phones',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.phones}'
              }
            },
            {
              xtype: 'textfield',
              fieldLabel: 'Email',
              name: 'email'
            }
          ]
        },
        {
          xtype: 'button',
          margin: 5,
          bind: {
            text: '{i18n.ui.save}'
          },
          listeners: {
            click: 'onButtonClick'
          }
        }
      ]
    }
  ]

});
/*
 * File: app/view/hr/party/AddViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.party.AddViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.hrpartyadd',

  onButtonClick: function(button, e, eOpts) {
    this.getView().down('form').submit({
      success: function(form, action) {
        Ext.Msg.alert('Success');
        form.owner.up('window').close();
      },
      failure: function(form, action) {
        Ext.Msg.alert('Error', action.result.error);
      }
    });
  }

});
/*
 * File: app/view/hr/party/AddViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.party.AddViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.hrpartyadd'

});
/*
 * File: app/view/hr/party/Grid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.party.Grid', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.hrpartygrid',


  controller: 'hrpartygrid',
  viewModel: {
    type: 'hrpartygrid'
  },
  header: false,
  defaultListenerScope: true,

  bind: {
    title: '{i18n.hr.party.title}',
    store: '{party}'
  },
  columns: [
    {
      xtype: 'numbercolumn',
      dataIndex: 'identity',
      flex: 1,
      format: '0000',
      bind: {
        text: '{i18n.hr.party.fields.identity}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'name_ka',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.name}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'address_ka',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.address}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'phones',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.phones}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'email',
      text: 'E-mail',
      flex: 1
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'contact_ka',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.contact}'
      }
    },
    {
      xtype: 'gridcolumn',
      hidden: true,
      dataIndex: 'account',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.account}'
      }
    }
  ],
  dockedItems: [
    {
      xtype: 'form',
      dock: 'bottom',
      width: 100,
      defaults: {
        anchor: '100%'
      },
      header: false,
      title: 'My Form',
      fieldDefaults: {
        labelAlign: 'right'
      },
      layout: {
        type: 'hbox',
        align: 'stretch'
      },
      items: [
        {
          xtype: 'container',
          flex: 1,
          layout: 'form',
          items: [
            {
              xtype: 'textfield',
              name: 'name',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.name}'
              }
            },
            {
              xtype: 'textfield',
              name: 'identity',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.identity}'
              }
            },
            {
              xtype: 'textfield',
              name: 'address',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.address}'
              }
            },
            {
              xtype: 'textfield',
              name: 'contact',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.contact}'
              }
            }
          ]
        },
        {
          xtype: 'container',
          layout: {
            type: 'vbox',
            align: 'stretch',
            padding: 5
          },
          items: [
            {
              xtype: 'button',
              flex: 1,
              bind: {
                text: '{i18n.document.search.ui.search}'
              },
              listeners: {
                click: {
                  fn: 'onButtonClick1',
                  scope: 'controller'
                }
              }
            },
            {
              xtype: 'button',
              flex: 1,
              bind: {
                text: '{i18n.hr.party.add}'
              },
              listeners: {
                click: {
                  fn: 'onButtonClick',
                  scope: 'controller'
                }
              }
            }
          ]
        }
      ]
    }
  ],
  listeners: {
    afterrender: 'onGridpanelAfterRender'
  },

  onGridpanelAfterRender: function(component, eOpts) {
    component.addDocked(new Ext.PagingToolbar({
      displayInfo: true,
      dock: 'bottom',
      afterPageText: ' / {0}',
      beforePageText: i18n.ui.page,
      emptyMsg: i18n.ui.emptyMsg,
      displayMsg : i18n.ui.displayMsg,
      bind: {
        store: '{party}'
      }
    }));
  }

});
/*
 * File: app/view/hr/party/GridViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.party.GridViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.hrpartygrid',

  onButtonClick1: function(button, e, eOpts) {
    var form = this.getView().down('form');
    var params = form.getValues();
    this.getStore('party').getProxy().setExtraParams(params);

    //this.getStore('customer').load({ params: form.getValues() });
    var st = this.getStore('party');
    st.removeAll();
    st.currentPage = 1;
    this.getStore('party').load();
  },

  onButtonClick: function(button, e, eOpts) {
    var newDialog = Ext.create('Tel100.view.hr.party.Add', {
      title: i18n.document.motion.selectReceiver
    });
    newDialog.show();
  }

});
/*
 * File: app/view/hr/party/GridViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.party.GridViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.hrpartygrid',


  stores: {
    party: {
      pageSize: 10,
      model: 'Tel100.model.hr.Party'
    }
  }

});
/*
 * File: app/view/document/relation/Answer.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.relation.Answer', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.documentrelationanswer',


  controller: 'documentrelationanswer',
  viewModel: {
    type: 'documentrelationanswer'
  },
  border: false,
  header: false,
  title: 'My Grid Panel',

  bind: {
    hidden: '{hideAnswers}',
    store: '{answers}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return [value,
        ' ',
        record.get('doctype'),
        '</a>'].join('');
      },
      draggable: false,
      resizable: false,
      sortable: false,
      dataIndex: 'docnumber',
      hideable: false,
      flex: 1,
      bind: {
        text: '{i18n.document.base.answers}'
      }
    }
  ],
  listeners: {
    celldblclick: 'onAnswersGridpanelCellDblClick'
  }

});
/*
 * File: app/view/document/relation/AnswerViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.relation.AnswerViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentrelationanswer',

  onAnswersGridpanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    var dm = this.getView().up('documentmain');
    var doc = Ext.create('Tel100.model.document.Base',{id: record.get('docid')});
    doc.load({
      success: function(document){
        dm.getController().openDocument(doc);
      }
    });
  },

  onStoreLoad: function(store, records, successful, eOpts) {
    var vm = this.getViewModel();
    vm.set('hideAnswers', !store.count());
  }

});
/*
 * File: app/view/document/relation/AnswerViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.relation.AnswerViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentrelationanswer',


  data: {
    hideAnswers: true
  },

  stores: {
    answers: {
      autoLoad: true,
      model: 'Tel100.model.document.Base',
      proxy: {
        type: 'ajax',
        extraParams: {
          related_id: '{document.id}'
        },
        url: '/api/documents/relations/answer',
        reader: {
          type: 'json'
        }
      },
      listeners: {
        load: 'onStoreLoad'
      }
    }
  }

});
/*
 * File: app/view/document/relation/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.relation.Panel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.documentrelationpanel',


  controller: 'documentrelationpanel',
  viewModel: {
    type: 'documentrelationpanel'
  },
  layout: 'fit',
  defaultListenerScope: true,

  bind: {
    title: '{i18n.document.relation.relations} ({relationCount})'
  },
  items: [
    {
      xtype: 'gridpanel',
      hideHeaders: true,
      scroll: 'vertical',
      bind: {
        store: '{relations}'
      },
      columns: [
        {
          xtype: 'gridcolumn',
          renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
            return '<strong>' + value + '</strong> <span class="text-muted">' + record.get('owner') + '</span>';
          },
          dataIndex: 'docnumber',
          text: 'document',
          flex: 1
        },
        {
          xtype: 'actioncolumn',
          width: 24,
          bind: {
            hidden: '{notEditable}'
          },
          items: [
            {
              handler: function(view, rowIndex, colIndex, item, e, record, row) {
                helpers.api.document.relation.delete({
                  params: {
                    id: record.id
                  },
                  success: function(params) {
                    view.up('documentrelationpanel').refresh();
                  }
                });
              },
              icon: '/images/delete.gif'
            }
          ]
        }
      ],
      listeners: {
        celldblclick: {
          fn: 'onGridpanelCellDblClick',
          scope: 'controller'
        }
      }
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    },
    {
      xtype: 'tool',
      type: 'plus',
      bind: {
        hidden: '{notEditable}'
      },
      listeners: {
        click: 'onAddRelation'
      }
    }
  ],

  onRefresh: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onAddRelation: function(tool, e, owner, eOpts) {
    var vm = this.getViewModel();
    var doc = vm.get('document');
    var view = this;
    if (!this.searchDialog) {
      this.searchDialog = Ext.create('Tel100.view.document.Search', {
        closeAction: 'hide',
        modal: true,
        maximizable: true
      });

      this.searchDialog.on('documentselected', function(related) {
        helpers.api.document.relation.create({
          params: {
            base_id: doc.id,
            related_id: related.id
          },
          success: function(params) {
            view.refresh();
          }
        });
      });
    }
    this.searchDialog.setParentDocument(doc);
    this.searchDialog.show();
  },

  refresh: function() {
    var view = this;
    var grid = view.down('gridpanel');
    grid.getStore().load();
  },

  initComponent: function() {
    this.callParent();
    var vm = this.getViewModel();
    // setting view model for the relations store
    vm.bind('{relations}', function(store) {
      if (store) {
        store.viewModel = this;
      }
    });
  },

  setEditable: function(editable) {
    var vm = this.getViewModel();
    vm.set('editable', editable);
  }

});
/*
 * File: app/view/document/relation/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.relation.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.documentrelationpanel',

  onGridpanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    var dm = this.getView().up('documentmain');
    var doc = Ext.create('Tel100.model.document.Base',{id: record.get('related_id')});
    doc.load({
      success: function(document){
        dm.getController().openDocument(doc);
      }
    });
  }

});
/*
 * File: app/view/document/relation/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.relation.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.documentrelationpanel',


  data: {
    relationCount: 0,
    editable: false
  },

  stores: {
    relations: {
      listeners: {
        load: function() {
          this.viewModel.set('relationCount', this.getTotalCount());
        },
        
      },
      autoLoad: true,
      model: 'Tel100.model.document.Base',
      proxy: {
        type: 'ajax',
        extraParams: {
          base_id: '{document.id}'
        },
        url: '/api/documents/relations',
        reader: {
          type: 'json'
        }
      }
    }
  },
  formulas: {
    notEditable: function(get) {
      return !get('editable');
    }
  }

});
Ext.define('Tel100.view.hr.tree.Panel', {
  extend: 'Ext.tree.Panel',
  alias: 'widget.hrtreepanel',


  controller: 'hrtreepanel',
  viewModel: {
    type: 'hrtreepanel'
  },
  bodyCls: 'x-tree-noicon',
  autoLoad: true,
  enableColumnHide: false,
  hideHeaders: true,
  rowLines: true,
  lines: false,
  rootVisible: false,
  useArrows: true,

  bind: {
    title: '{i18n.hr.tree.title}',
    store: '{structure}'
  },
  viewConfig: {

  },
  columns: [
    {
      xtype: 'treecolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        if (record.toHtml) {
          return record.toHtml();
        } else {
          return '<i class="fa fa-bolt"></i> ' + i18n.application.telasi;
        }
      },
      dataIndex: 'name',
      flex: 1
    }
  ],
  listeners: {
    beforeload: 'onTreepanelBeforeLoad',
    load: 'onTreepanelLoad',
    afterrender: 'onTreepanelAfterRender',
    startsearch: 'onTreepanelStartsearch'
  },
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    }
  ],
  dockedItems: [
    {
      xtype: 'toolbar',
      dock: 'bottom',
      items: [
        {
          xtype: 'textfield',
          itemId: 'searchField',
          fieldLabel: 'Label',
          hideLabel: true,
          listeners: {
            change: 'onSearchFieldChange',
            specialkey: 'onSearchFieldSpecialkey'
          }
        },
        {
          xtype: 'button',
          text: '<i class="fa fa-search"></i>',
          listeners: {
            click: 'onSearchButtonClick'
          }
        },
        {
          xtype: 'button',
          disabled: true,
          itemId: 'nextbutton',
          text: '<i class="fa fa-forward"></i>',
          listeners: {
            click: 'onNextSearchButtonClick'
          }
        }
      ]
    }
  ],

  refresh: function() {
    this.getStore('structure').load();
  }

});
/*
 * File: app/view/hr/tree/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.tree.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.hrtreepanel',

  searchAndExpand: function(view, rn, searchString, field, fn) {
    var found = rn.findChildBy(function(child){

      this.counter++;
      if(this.counter <= this.oldcounter){return false;}

      var childvalue = child.get(field);
      if(childvalue){
        return (fn(childvalue, searchString));
      }
    }, this, true);

    if(found){
      this.oldcounter = this.counter;

      view.collapseAll();
      view.expandPath(found.getPath());
      view.getSelectionModel().select(found);
    }
  },

  startSearch: function() {
        var view = this.getView(),
          searchValue = view.down('textfield').getValue(),
          rn = view.getRootNode();

        this.counter = 0;
        this.oldcounter = 0;

        this.searchAndExpand(view, rn, searchValue, 'full_name', function(cv, sv) { return cv.indexOf(sv) != -1; });

        this.getView().down('#nextbutton').setDisabled(false);
  },

  onTreepanelBeforeLoad: function(store, operation, eOpts) {
    this.getView().setLoading(true);
  },

  onTreepanelLoad: function(treestore, records, successful, operation, node, eOpts) {
    this.getView().setLoading(false);
  },

  onRefresh: function(tool, e, owner, eOpts) {
    this.getView().refresh();
  },

  onSearchFieldChange: function(field, newValue, oldValue, eOpts) {
    this.counter = 0;
    this.oldcounter = 0;
    this.getView().down('#nextbutton').setDisabled(true);
  },

  onSearchFieldSpecialkey: function(field, e, eOpts) {
    if(e.getKey() == e.ENTER){
      this.startSearch();
    }
  },

  onSearchButtonClick: function(button, e, eOpts) {
    this.startSearch();
  },

  onNextSearchButtonClick: function(button, e, eOpts) {
    var view = this.getView(),
      rn = view.getRootNode(),
      searchValue = view.down('textfield').getValue();

    this.counter = 0;
    this.oldcounter++;

    this.searchAndExpand(view, rn, searchValue, 'full_name', function(cv, sv) { return cv.indexOf(sv) != -1; });
  },

  onTreepanelAfterRender: function(component, eOpts) {
    helpers.party.vacationAction(component);
  },

  onTreepanelStartsearch: function(view, sub_id) {
    var rn = view.getRootNode();
    this.counter = 0;
    this.oldcounter = 0;
    this.searchAndExpand(view, rn, sub_id, 'id', function(cv, sv) { return cv == sv; });
  }

});
/*
 * File: app/view/hr/tree/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.tree.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.hrtreepanel',


  stores: {
    structure: {
      type: 'tree',
      autoLoad: false,
      root: {
        
      },
      proxy: {
        type: 'ajax',
        url: '/api/hr/structure',
        reader: {
          type: 'json',
          typeProperty: 'ext_type'
        }
      },
      fields: [
        {
          name: 'name'
        }
      ]
    }
  }

});
/*
 * File: app/view/hr/vacation/Window.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.vacation.Window', {
  extend: 'Ext.window.Window',
  alias: 'widget.hrvacationwindow',


  controller: 'hrvacationwindow',
  viewModel: {
    type: 'hrvacationwindow'
  },
  height: 340,
  resizable: false,
  width: 700,
  autoDestroy: false,
  modal: true,

  bind: {
    title: '{i18n.vacation.ui.button}'
  },
  items: [
    {
      xtype: 'form',
      defaults: {
        labelWidth: 200
      },
      bodyPadding: 10,
      header: false,
      title: 'My Form',
      jsonSubmit: true,
      url: '/api/vacation/create',
      items: [
        {
          xtype: 'combobox',
          anchor: '100%',
          name: 'vacation_type',
          allowBlank: false,
          editable: false,
          displayField: 'name',
          valueField: 'id',
          bind: {
            fieldLabel: '{i18n.vacation.fields.type}',
            store: '{types}'
          }
        },
        {
          xtype: 'fieldcontainer',
          height: 26,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            fieldLabel: '{i18n.vacation.fields.period}'
          },
          items: [
            {
              xtype: 'datefield',
              flex: 1,
              margin: '0 10 0 0',
              name: 'from_date',
              allowBlank: false,
              format: 'd/m/Y'
            },
            {
              xtype: 'datefield',
              flex: 1,
              name: 'to_date',
              allowBlank: false,
              format: 'd/m/Y'
            }
          ]
        },
        {
          xtype: 'label',
          margin: '10 0 0 0'
        },
        {
          xtype: 'panel',
          padding: '0 0 10 0',
          header: false,
          bind: {
            title: '{i18n.vacation.fields.signees}'
          }
        },
        {
          xtype: 'fieldcontainer',
          height: 26,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            fieldLabel: '{i18n.vacation.fields.substitude}'
          },
          items: [
            {
              xtype: 'textfield',
              flex: 1,
              id: 'substitude_name',
              name: 'substitude_name',
              editable: false
            },
            {
              xtype: 'hiddenfield',
              flex: 1,
              fieldLabel: 'substitude',
              name: 'substitude'
            },
            {
              xtype: 'button',
              itemId: 'substitude',
              text: '...',
              listeners: {
                click: 'onSelectSubstitude'
              }
            }
          ]
        },
        {
          xtype: 'combobox',
          anchor: '100%',
          name: 'substitude_type',
          readOnly: false,
          editable: false,
          displayField: 'name',
          valueField: 'id',
          bind: {
            fieldLabel: '{i18n.vacation.fields.docview}',
            store: '{substitude_type}',
            selection: '{substitude_explain}'
          }
        },
        {
          xtype: 'textareafield',
          height: 100,
          width: '100%',
          name: 'substitude_type_explanation',
          submitValue: false,
          editable: false,
          bind: {
            value: '{substitude_explain.explain}'
          }
        },
        {
          xtype: 'fieldcontainer',
          height: 32,
          margin: '0 0 10 0',
          fieldLabel: '',
          layout: {
            type: 'hbox',
            align: 'stretch',
            pack: 'end',
            padding: 5
          },
          items: [
            {
              xtype: 'button',
              flex: 1,
              margin: '0 10 0 0',
              bind: {
                text: '{i18n.vacation.ui.save}'
              },
              listeners: {
                click: 'onOKButtonClick'
              }
            },
            {
              xtype: 'button',
              flex: 1,
              bind: {
                text: '{i18n.vacation.ui.cancel}'
              },
              listeners: {
                click: 'onCancelButtonClick'
              }
            }
          ]
        },
        {
          xtype: 'label',
          hidden: true,
          padding: '10 0 0 0',
          bind: {
            text: '{i18n.vacation.fields.signees}'
          }
        },
        {
          xtype: 'panel',
          hidden: true,
          padding: '0 0 10 0',
          header: false,
          bind: {
            title: '{i18n.vacation.fields.signees}'
          }
        },
        {
          xtype: 'fieldcontainer',
          anchor: '100%',
          hidden: true,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            fieldLabel: '{i18n.vacation.fields.head_of_group}'
          },
          items: [
            {
              xtype: 'textfield',
              flex: 1,
              name: 'head_of_group_name',
              editable: false
            },
            {
              xtype: 'hiddenfield',
              flex: 1,
              fieldLabel: 'Label',
              name: 'head_of_group'
            },
            {
              xtype: 'button',
              itemId: 'head_of_group',
              text: '...',
              listeners: {
                click: 'onSelectHeadOfGroupButtonClick'
              }
            }
          ]
        },
        {
          xtype: 'fieldcontainer',
          anchor: '100%',
          hidden: true,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            fieldLabel: '{i18n.vacation.fields.head_of_division}'
          },
          items: [
            {
              xtype: 'textfield',
              flex: 1,
              name: 'head_of_division_name',
              editable: false
            },
            {
              xtype: 'hiddenfield',
              flex: 1,
              fieldLabel: 'Label',
              name: 'head_of_division'
            },
            {
              xtype: 'button',
              itemId: 'head_of_division',
              text: '...',
              listeners: {
                click: 'onSelectHeadOfDivisionButtonClick'
              }
            }
          ]
        },
        {
          xtype: 'fieldcontainer',
          anchor: '100%',
          hidden: true,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            fieldLabel: '{i18n.vacation.fields.head_of_department}'
          },
          items: [
            {
              xtype: 'textfield',
              flex: 1,
              name: 'head_of_department_name',
              editable: false
            },
            {
              xtype: 'hiddenfield',
              flex: 1,
              fieldLabel: 'Label',
              name: 'head_of_department'
            },
            {
              xtype: 'button',
              itemId: 'head_of_department',
              text: '...',
              listeners: {
                click: 'onSelectHeadOfDepartmentClick'
              }
            }
          ]
        },
        {
          xtype: 'fieldcontainer',
          anchor: '100%',
          hidden: true,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            fieldLabel: '{i18n.vacation.fields.director}'
          },
          items: [
            {
              xtype: 'textfield',
              flex: 1,
              name: 'director_name',
              editable: false
            },
            {
              xtype: 'hiddenfield',
              flex: 1,
              fieldLabel: 'Label',
              name: 'director'
            },
            {
              xtype: 'button',
              itemId: 'director',
              text: '...',
              listeners: {
                click: 'onSelectDirectorClick'
              }
            }
          ]
        },
        {
          xtype: 'fieldcontainer',
          anchor: '100%',
          hidden: true,
          layout: {
            type: 'hbox',
            align: 'stretch'
          },
          bind: {
            fieldLabel: '{i18n.vacation.fields.head_of_hr}'
          },
          items: [
            {
              xtype: 'textfield',
              flex: 1,
              name: 'head_of_hr_name',
              editable: false
            },
            {
              xtype: 'hiddenfield',
              flex: 1,
              fieldLabel: 'Label',
              name: 'head_of_hr'
            },
            {
              xtype: 'button',
              itemId: 'head_of_hr',
              text: '...',
              listeners: {
                click: 'onSelectHeadOfHRClick'
              }
            }
          ]
        }
      ]
    }
  ]

});
/*
 * File: app/view/hr/vacation/WindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.vacation.WindowViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.hrvacationwindow',

  chosePerson: function(button) {
    var view = this;
    var opts = { viewModel: {
                    data: {
                      hideHR: false,
                      hideParty: true,
                      hideCustomers: true
                    }
                 }
               };

    var dialog = helpers.party.getPartyDialog(function(receivers) {
      if (receivers.length > 0) {
            var person = receivers[0];
            if (person.get('id') !== undefined && person.get('ext_type') == 'hr.Employee'){
              var form = button.up('form').getForm();
              form.findField(button.itemId).setValue(person.get('id'));
              form.findField(button.itemId+'_name').setValue(person.get('name'));
            }
          }
    }, opts);
    dialog.show();
  },

  onSelectSubstitude: function(button, e, eOpts) {
    this.chosePerson(button);
  },

  onOKButtonClick: function(button, e, eOpts) {
    var form = button.up('form').getForm();
    if(form.isValid()) {
      form.submit({
        success: function(form,action) {
          button.up('window').close();
          //we have to close the window here!!
        },
        failure: function(form,action){
          debugger;
          Ext.MessageBox.alert('Error',action.result.error);
        }});
      } else {
        Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
      }
  },

  onCancelButtonClick: function(button, e, eOpts) {
    button.up('window').close();
  },

  onSelectHeadOfGroupButtonClick: function(button, e, eOpts) {
    this.chosePerson(button);
  },

  onSelectHeadOfDivisionButtonClick: function(button, e, eOpts) {
    this.chosePerson(button);
  },

  onSelectHeadOfDepartmentClick: function(button, e, eOpts) {
    this.chosePerson(button);
  },

  onSelectDirectorClick: function(button, e, eOpts) {
    this.chosePerson(button);
  },

  onSelectHeadOfHRClick: function(button, e, eOpts) {
    this.chosePerson(button);
  }

});
/*
 * File: app/view/hr/vacation/WindowViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.vacation.WindowViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.hrvacationwindow',


  stores: {
    types: {
      autoLoad: true,
      model: 'Tel100.model.hr.vacation.Type'
    },
    substitude_type: {
      data: [
        {
          id: '1',
          name: '{i18n.vacation.substitude_type.none.title}',
          explain: '{i18n.vacation.substitude_type.none.explain}'
        },
        {
          id: '2',
          name: '{i18n.vacation.substitude_type.all.title}',
          explain: '{i18n.vacation.substitude_type.all.explain}'
        },
        {
          id: '3',
          name: '{i18n.vacation.substitude_type.new.title}',
          explain: '{i18n.vacation.substitude_type.new.explain}'
        },
        
      ],
      fields: [
        {
          name: 'id'
        },
        {
          name: 'name'
        },
        {
          name: 'explain'
        }
      ]
    }
  }

});
/*
 * File: app/view/user/box/Button.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.box.Button', {
  extend: 'Ext.button.Button',
  alias: 'widget.userboxbutton',


  controller: 'userboxbutton',
  viewModel: {
    type: 'userboxbutton'
  },

  bind: {
    text: '<i class="fa fa-user"></i> {currentUser.full_name}'
  },
  menu: {
    xtype: 'menu',
    items: [
      {
        xtype: 'menuitem',
        bind: {
          text: '{i18n.user.ui.profile}'
        }
      },
      {
        xtype: 'menuseparator'
      },
      {
        xtype: 'menuitem',
        bind: {
          text: '{i18n.user.ui.logout}'
        },
        listeners: {
          click: 'onLogout'
        }
      }
    ]
  }

});
/*
 * File: app/view/user/box/ButtonViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.box.ButtonViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.userboxbutton',

  onLogout: function(item, e, eOpts) {
    window.location.reload();
  }

});
/*
 * File: app/view/user/box/ButtonViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.box.ButtonViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.userboxbutton'

});
/*
 * File: app/view/user/login/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.login.Panel', {
  extend: 'Ext.container.Container',
  alias: 'widget.userloginpanel',


  controller: 'userloginpanel',
  viewModel: {
    type: 'userloginpanel'
  },

  layout: {
    type: 'hbox',
    align: 'middle',
    pack: 'center'
  },
  items: [
    {
      xtype: 'form',
      flex: 0,
      frame: true,
      width: 400,
      bodyBorder: true,
      bodyPadding: 10,
      bind: {
        title: '{i18n.user.ui.login_title}'
      },
      items: [
        {
          xtype: 'textfield',
          anchor: '100%',
          itemId: 'username',
          allowBlank: false,
          bind: {
            fieldLabel: '{i18n.user.username}'
          }
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          itemId: 'password',
          inputType: 'password',
          allowBlank: false,
          bind: {
            fieldLabel: '{i18n.user.password}'
          },
          listeners: {
            specialkey: 'onPasswordSpecialkey'
          }
        },
        {
          xtype: 'container',
          layout: {
            type: 'hbox',
            align: 'stretch',
            pack: 'end'
          },
          items: [
            {
              xtype: 'button',
              formBind: true,
              bind: {
                text: '{i18n.user.ui.login}'
              },
              listeners: {
                click: 'onLoginClick'
              }
            }
          ]
        }
      ]
    }
  ],
  listeners: {
    afterrender: 'onAfterRender'
  }

});
/*
 * File: app/view/user/login/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.login.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.userloginpanel',

  onLogin: function() {
    var self = this;
    var view = self.getView();

    var txtUsername = view.down('#username');
    var txtPassword = view.down('#password');

    var username = txtUsername.value;
    var password = txtPassword.value;

    if (username && password) {
      helpers.ajax.request({
        url: '/api/user/login',
        method: 'POST',
        view: view,
        params: {
          userID: username,
          password: password,
          api_locale: helpers.i18n.getCurrentLocale()
        },
        success: function(data) {
          var user = new Tel100.model.User(data.user);
          helpers.user.setCurrentUser(user, password);
          view.fireEvent('loggedin', user);
        }
      });
    }
  },

  onPasswordSpecialkey: function(field, e, eOpts) {
    if (e.getKey() === Ext.EventObject.ENTER) {
      this.onLogin();
    }
  },

  onLoginClick: function(button, e, eOpts) {
    this.onLogin();
  },

  onAfterRender: function(component, eOpts) {
    var txtUsername = component.down('#username');
    var txtPassword = component.down('#password');
    var username = helpers.preferences.getValue('username');
    if (username) {
      txtUsername.setValue(username);
      txtPassword.focus();
    } else {
      txtUsername.focus();
    }
  }

});
/*
 * File: app/view/user/login/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.login.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.userloginpanel'

});
/*
 * File: app/view/user/substitude/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.substitude.Panel', {
  extend: 'Ext.panel.Panel',
  alias: 'widget.usersubstitudepanel',


  controller: 'usersubstitudepanel',
  viewModel: {
    type: 'usersubstitudepanel'
  },
  shadow: 'drop',
  shadowOffset: 20,
  cls: 'floating-substitude-top',
  floating: true,
  height: 26,
  html: 'asadasdasds',
  width: 500,
  layout: 'border',
  bodyPadding: 3,
  bodyStyle: {
    'background-color': 'red',
    color: 'white',
    'text-align': 'center'
  },
  header: false,

  items: [
    {
      xtype: 'button',
      region: 'east',
      padding: 0,
      width: 20,
      text: 'X',
      listeners: {
        click: 'onButtonClick'
      }
    }
  ]

});
/*
 * File: app/view/user/substitude/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.substitude.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.usersubstitudepanel',

  onButtonClick: function(button, e, eOpts) {
    button.up('panel').destroy();
  }

});
/*
 * File: app/view/user/substitude/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.user.substitude.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.usersubstitudepanel'

});
/*
 * File: app/view/admin/types/grid/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.types.grid.Panel', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.admintypesgridpanel',


  controller: 'admintypesgridpanel',
  viewModel: {
    type: 'admintypesgridpanel'
  },
  width: 300,

  bind: {
    title: '{i18n.document.type.ui.types}',
    store: '{types}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      width: 50,
      dataIndex: 'order_by',
      bind: {
        text: '{i18n.document.type.order_by}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'name',
      flex: 1,
      bind: {
        text: '{i18n.document.type.name}'
      }
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    }
  ],

  refresh: function(opts) {
    this.getStore('types').load();
  }

});
/*
 * File: app/view/admin/types/grid/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.types.grid.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.admintypesgridpanel',

  onRefresh: function(tool, e, owner, eOpts) {
    this.getView().refresh();
  },

  onBeforeLoad: function(store, operation, eOpts) {
    this.getView().setLoading(true);
  },

  onLoad: function(store, records, successful, eOpts) {
    this.getView().setLoading(false);
  }

});
/*
 * File: app/view/admin/types/grid/PanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.admin.types.grid.PanelViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.admintypesgridpanel',


  stores: {
    types: {
      autoLoad: true,
      model: 'Tel100.model.document.Type',
      listeners: {
        beforeload: 'onBeforeLoad',
        load: 'onLoad'
      }
    }
  }

});