/*
 * File: app/view/document/file/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.gnerc.Panel', {
  extend: 'Ext.form.Panel',
  alias: 'widget.documentgnercpanel',

  requires: [
    'Tel100.view.document.gnerc.PanelViewModel',
    'Tel100.view.document.gnerc.PanelViewController',
    'Ext.toolbar.Toolbar',
    'Ext.form.Panel',
    'Ext.form.field.File',
    'Ext.grid.Panel',
    'Ext.grid.View',
    'Ext.grid.column.Action',
    'Ext.panel.Tool'
  ],

  controller: 'documentgnercpanel',
  viewModel: {
    type: 'documentgnercpanel'
  },
  border: false,
  defaultListenerScope: true,
  bodyPadding: 5,

  bind: {
    title: '{dynamicTitle}'
  },

  listeners: {
    beforerender: {
      fn: 'onBeforeRender',
      scope: 'controller'
    }
  },

  items: [
    {
        xtype: 'combobox',
        anchor: '100%',
        editable: false,
        displayField: 'name',
        valueField: 'id',
        bind: {
          fieldLabel: '{i18n.document.base.gnerc_subtype}',
          value: '{type_id}',
          readOnly: '{notEditable}',
          store: '{gnerc_subtypes}',
          hidden: '{!isGnercType4}'
        },
        listConfig: {
         listeners: {
          select: {
            fn: 'onGnercTypeChange',
            scope: 'controller'
          },
          beforeshow: function(picker) {
             picker.minWidth = picker.up('combobox').getSize().width;
          }
         }
        }
      }, { 
            xtype: 'container',
            layout: {
              type: 'hbox',
              align: 'stretch'
            },
            anchor: '100%',
            items:[{
                xtype: 'textfield',
                flex: 5,
                readOnly: true,
                bind:{
                  fieldLabel: '{i18n.document.file.file}',
                  value: '{filename}',
                }
              }, {
                xtype: 'filefield',
                name: 'file',
                buttonOnly: true,
                width: 29,
                buttonText: '<i class="fa fa-plus"></i>',
                bind: {
                  // fieldLabel: '{i18n.document.file.file}',
                  hidden: '{!showPlus}'
                },
                listeners: {
                  change: {
                    fn: 'onFilefieldChange',
                    scope: 'controller'
                  }
                }
              }, {
                xtype: 'button',
                margin: 1,
                width: 29,
                text: '<i class="fa fa-minus"></i>',
                bind: {
                  hidden: '{!showMinus}',
                },
                listeners: {
                  click: {
                    fn: 'onFileRemoveClick',
                    scope: 'controller'
                  }
                }
              }]
         }
    ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    }
  ],

  onRefresh: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  refresh: function() {
    var vm = this.getViewModel();
    vm.getStore('gnerc').load();
  },

  initComponent: function() {
    this.callParent();
    var view = this;
    var viewModel = this.getViewModel();
    viewModel.bind('{gnerc}', function(store) {
      if (store) {
        store.view = view;
        store.viewModel = viewModel;
      }
    });
  },

  setEditable: function(editable) {
    var vm = this.getViewModel();
    vm.set('editable', editable);
  },

  getEditable: function() {
    var vm = this.getViewModel();
    return vm.get('editable');
  }

});