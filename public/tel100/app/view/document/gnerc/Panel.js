/*
 * File: app/view/document/file/Panel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.gnerc.Panel', {
  extend: 'Ext.form.Panel',
  alias: 'widget.documentgnercpanel',

  requires: [
    'Tel100.view.document.gnerc.PanelViewModel',
    'Tel100.view.document.gnerc.PanelViewController',
    'Ext.form.Panel',
    'Ext.grid.Panel',
    'Ext.grid.View',
    'Ext.grid.column.Action',
    'Ext.panel.Tool'
  ],

  controller: 'documentgnercpanel',
  viewModel: {
    type: 'documentgnercpanel'
  },
  border: false,
  defaultListenerScope: true,
  bodyPadding: 5,
  autoScroll: true,

  bind: {
    title: '{dynamicTitle}'
  },

  listeners: {
    beforerender: {
      fn: 'onBeforeRender',
      scope: 'controller'
    }
  },

  items: [
  // {
  //   xtype: 'documentgnercsmscreatorpanel'
  // },
  // {
  //   xtype: 'documentgnercsmsviewerpanel'
  // },
  {
    xtype: 'displayfield',
    text: 'aaa',
    bind: {
      fieldLabel: '{i18n.document.base.my_status}',
      hidden: '{hideStatus}',
      value: '{status}'
    },
    renderer: function(value, object){
      if(value == "1"){
        return '<span class="label label-success"></i> ' + i18n.document.base.positive + '</span>';
      } else {
        return '<span class="label label-danger"></i> ' + i18n.document.base.negative + '</span>';
      }
    }
  }, 
  // {
  //             xtype: 'checkbox',
  //             inputValue: '1',
  //             uncheckedValue: '0',
  //             bind: {
  //               fieldLabel: '{i18n.document.base.positive}',
  //               disabled: '{!editable}',
  //               value: '{status}',
  //               hidden: '{!showSms}'
  //             },
  //             listeners: {
  //                 change: {
  //                   fn: 'onStatusChange'
  //                 }
  //             }
  //           },
  {
      xtype: 'segmentedbutton',
      width: '100%',
      margin: "0 0 5 0",
      // value: '1',
      // readOnly: 'true',
      bind: {
        // disabled: '{!editable}',
        hidden: '{!showSms}',
        value: '{status}'
      },
      items: [
        {
          value: 1,
          bind: {
            text: '{i18n.document.base.positive}'
          },
        },
        {
          value: 0,
          bind: {
            text: '{i18n.document.base.negative}'
          }
        }
      ],
      listeners: {
        toggle: {
          fn: 'onStatusChange',
        }
      }
    },
    {
        xtype: 'combobox',
        anchor: '100%',
        editable: false,
        displayField: 'name',
        valueField: 'id',
        bind: {
          fieldLabel: '{i18n.document.base.gnerc_subtype}',
          value: '{type_id}',
          readOnly: '{notEditable}',
          store: '{gnerc_subtypes}',
          hidden: '{!isGnercType4}'
        },
        listConfig: {
         listeners: {
          select: {
            fn: 'onGnercTypeChange',
            scope: 'controller'
          },
          beforeshow: function(picker) {
             picker.minWidth = picker.up('combobox').getSize().width;
          }
         }
        }
      }, { 
            xtype: 'container',
            layout: {
              type: 'hbox',
              align: 'stretch'
            },
            anchor: '100%',
            items:[{
                xtype: 'textfield',
                flex: 5,
                readOnly: true,
                bind:{
                  fieldLabel: '{i18n.document.file.file}',
                  value: '{filename}',
                }
              }, {
                xtype: 'filefield',
                name: 'file',
                buttonOnly: true,
                width: 29,
                buttonText: '<i class="fa fa-plus"></i>',
                bind: {
                  // fieldLabel: '{i18n.document.file.file}',
                  hidden: '{!showPlus}'
                },
                listeners: {
                  change: {
                    fn: 'onFilefieldChange',
                    scope: 'controller'
                  }
                }
              }, {
                xtype: 'button',
                margin: 1,
                width: 29,
                text: '<i class="fa fa-minus"></i>',
                bind: {
                  hidden: '{!showMinus}',
                },
                listeners: {
                  click: {
                    fn: 'onFileRemoveClick',
                    scope: 'controller'
                  }
                }
              }]
         }, {
            xtype: 'container',
            anchor: '100%',
            layout: {
              type: 'vbox',
              pack: 'top',
            },
            items: [{
              xtype: 'checkbox',
              inputValue: '1',
              uncheckedValue: '0',
              bind: {
                fieldLabel: '{i18n.document.base.mediate}',
                readOnly: '{!hideStatus}',
                value: '{mediate}',
                hidden: '{!isReply}'
              },
              listeners: {
                  change: {
                    fn: 'onMediateClick',
                    scope: 'controller'
                  }
              }
            }]
         }, { 
            xtype: 'gridpanel',
            name: 'smses',
            anchor: '100%',
            hideHeaders: true,
            bind: {
              store: '{smses}',
              hidden: '{!editable}'
            },
            columns: [{
              xtype: 'gridcolumn',
              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                var text = record.get('text');
                if (text) {
                  text = '<p class="text-muted" style="white-space:normal;margin:0;">' + text + '</p>'
                };

                return [
                  '<p style="margin:0;"><i class="fa fa-phone">&nbsp;</i><span class="text-danger">', record.get('phone'), '</span></p>',
                  text
                ].join('');

              },
              flex: 1,
              sortable: false,
              hidable: false
            }, {
                  xtype: 'checkcolumn',
                  width: 30,
                  dataIndex: 'active',
                  listeners: {
                    checkchange: function(view, rowIndex, checked, eOpts){
                      var panel = view.up('documentgnercpanel');
                      var id = panel.getViewModel().getStore('smses').getAt(rowIndex).id;
                      var value = checked === true ? 1 : 0;
                      helpers.api.document.gnerc.updateSms(id, { params: { active: value }});
                    }
                  }
            },{
                  xtype: 'actioncolumn',
                  width: 30,
                  items: [{
                    icon: '/images/pencil.png',
                    handler: function(grid, rowIndex, colIndex) {
                      var item = grid.getStore().getAt(rowIndex);
                      var me = this.getView();
                      Ext.Msg.prompt({
                          title: 'SMS',
                          row: rowIndex,
                          message: 'Edit sms:',
                          width: 300,
                          buttons: Ext.Msg.OKCANCEL,
                          multiline: true,
                          fn: function(buttonValue, inputText, showConfig) {
                            var store = this.getStore();
                            var item = store.getAt(showConfig.row);
                            item.set('text', inputText);

                            var id = item.id;
                            helpers.api.document.gnerc.updateSms(id, { params: { text: inputText }});
                          },
                          scope: me,
                          value: item.get('text')
                      });
                    }
                  }]
            }]
          }, 
    ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onRefresh'
      }
    }
  ],

  onRefresh: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onResetSmsClick: function(){
    this.getController().resetSms();
  },

  // onStatusChange: function(view, newValue, oldValue, eOpts){
  //   debugger;
  //   var vm = this.getViewModel();
  //   var value = newValue == false ? 0 : 1;
  //   this.getController().onGnercStatusChange(value);
  //   helpers.api.document.gnerc.resetSms(vm.get('document').id, value,{
  //     success: function(){
  //         vm.getStore('smses').load();
  //     }
  //   });
  // },  

  onStatusChange: function(view, button, isPressed, eOpts){
    var vm = this.getViewModel();
    this.getController().onGnercStatusChange(vm.get('status'));
    helpers.api.document.gnerc.resetSms(vm.get('document').id, vm.get('status'),{
      success: function(){
          vm.getStore('smses').load();
      }
    });
  },

  refresh: function() {
    var vm = this.getViewModel();
    vm.getStore('gnerc').load();
    vm.getStore('smshistory').load();
    vm.getStore('smses').load();
  },

  initComponent: function() {
    this.callParent();
    var view = this;
    var viewModel = this.getViewModel();
    viewModel.bind('{gnerc}', function(store) {
      if (store) {
        store.view = view;
        store.viewModel = viewModel;
      }
    });
  },

  setEditable: function(editable) {
    var vm = this.getViewModel();
    vm.set('editable', editable);
  },

  getEditable: function() {
    var vm = this.getViewModel();
    return vm.get('editable');
  }

});