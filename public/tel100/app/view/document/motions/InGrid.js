/*
 * File: app/view/document/motions/InGrid.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.InGrid', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.documentmotionsingrid',

  requires: [
    'Tel100.view.document.motions.InGridViewModel',
    'Ext.grid.column.Column',
    'Ext.grid.View'
  ],

  config: {
    selection: null
  },

  viewModel: {
    type: 'documentmotionsingrid'
  },
  publishes: [
    'selection'
  ],

  bind: {
    selection: '{selection}',
    store: '{motions}'
  },
  columns: [
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return helpers.document.status.motionStatusIcon(value, record);
      },
      draggable: false,
      width: 28,
      sortable: false,
      dataIndex: 'status',
      emptyCellText: '',
      hideable: false
    },
    {
      xtype: 'gridcolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        if (value) {
          return value;
        } else {
          var vm = this.getViewModel();
          var doc = vm.get('document');
          var numb = doc.get('docnumber');
          return '>>> ' + numb;
        }
      },
      draggable: false,
      width: 200,
      sortable: false,
      dataIndex: 'senderName',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.sender}'
      }
    },
    {
      xtype: 'gridcolumn',
      draggable: false,
      width: 200,
      sortable: false,
      dataIndex: 'motion_text',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.motion_text}'
      }
    },
    {
      xtype: 'gridcolumn',
      draggable: false,
      width: 100,
      sortable: false,
      dataIndex: 'due_date',
      formatter: 'date("d/m/Y")',
      hideable: false,
      bind: {
        text: '{i18n.document.motion.due_date}'
      }
    }
  ],
  viewConfig: {
    getRowClass: function(record, rowIndex, rowParams, store) {
      var status = record.get('status');
      return helpers.document.status.motionStatusRowClass(status, record);
    }
  },

  refresh: function() {
    this.getStore().load();
  },

  initComponent: function() {
    this.callParent();
    var self = this;
    var vm = this.getViewModel();
    vm.bind('{selection}', function(motion) {
      vm.set('activeMotion', self.getActiveMotion());
    });
    vm.bind('{motions}', function(store) {
      store.on('load', function() {
        vm.set('activeMotion', self.getActiveMotion({ store: store }));
      });
    });
  },

  getActiveMotion: function(opts) {
    var vm = this.getViewModel();
    var selection = vm.get('selection');
    if (selection) {
      return selection;
    } else {
      var store = (opts && opts.store) || this.getStore();
      if (store && store.getCount() > 0) {
        return store.getAt(0);
      }
      return null;
    }
  }

});