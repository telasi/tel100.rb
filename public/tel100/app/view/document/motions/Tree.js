/*
 * File: app/view/document/motions/Tree.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.Tree', {
  extend: 'Ext.tree.Panel',
  alias: 'widget.documentmotionstree',

  requires: [
    'Tel100.view.document.motions.TreeViewModel',
    'Tel100.view.document.motions.MotionQuickView',
    'Ext.tree.View',
    'Ext.tree.Column',
    'Ext.panel.Tool'
  ],

  config: {
    selection: null
  },

  viewModel: {
    type: 'documentmotionstree'
  },
  border: false,
  bodyBorder: false,
  bodyCls: 'x-tree-noicon',
  autoLoad: true,
  enableColumnHide: false,
  hideHeaders: true,
  rowLines: true,
  scroll: 'vertical',
  lines: false,
  useArrows: true,
  defaultListenerScope: true,

  bind: {
    selection: '{selection}',
    title: '{i18n.document.motion.tree}',
    store: '{motions}'
  },
  viewConfig: {

  },
  columns: [
    {
      xtype: 'treecolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var statusDecorator = function(status, isNew, text) {
          var decoration = helpers.document.status.statusDecoration(status);
          var icon;
          if (isNew && status === helpers.document.status.CURRENT) {
            icon = '<i class="text-danger fa fa-circle"></i>';
          } else {
            icon = '<i class="fa ' + decoration.icon + '"></i>';
          }
          return '<span class="' + decoration.style + '">' + ' ' + icon + ' ' + text + '</span>';
        };

        if (record.get('root')) {
          var grid = view.up('documentmotionstree');
          var vm = grid.getViewModel();
          var doc = vm.get('document');
          var status = doc.get('status');
          var roleName = i18n.document.role.creator;
          var txt = '#<strong>' + doc.get('docnumber') + '</strong>: ' + doc.get('sender_name') + ', <span class="text-muted">' + roleName + '</span>';
          return statusDecorator(status, false, txt);
        } else {
          var status = record.get('status');
          var isNew = record.get('is_new');
          var currentStatus = record.get('current_status');
          var txt;
          var role = record.get('receiver_role');
          if (currentStatus === '' || currentStatus === '--') {
            txt = '<strong>' + value + '</strong>, <span class="text-muted">' + i18n.document.role[role] + '</span>';
          } else {
            txt = '<strong>' + value + '</strong>, <span class="text-muted">' + i18n.document.role[role] + '</span> &mdash; ' + currentStatus;
          }
          return statusDecorator(status, isNew, txt);
        }
      },
      dataIndex: 'receiver',
      text: 'Receiver',
      flex: 1
    }
  ],
  tools: [
    {
      xtype: 'tool',
      type: 'refresh',
      listeners: {
        click: 'onToolClick'
      }
    }
  ],
  listeners: {
    beforecellcontextmenu: 'onTreepanelBeforeCellContextMenu'
  },
  dockedItems: [
    {
      xtype: 'documentmotionsmotionquickview',
      resizable: true,
      style: 'background-color: #dfeaf2;',
      dock: 'bottom',
      bind: {
        motion: '{selection}',
        hidden: '{hideQuickProperties}'
      }
    }
  ],

  onToolClick: function(tool, e, owner, eOpts) {
    this.refresh();
  },

  onTreepanelBeforeCellContextMenu: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    if (record.get('type') === 'motion') {
      var gridMenu = Ext.create('Ext.menu.Menu', {
        items: [{
          text: i18n.document.motion.properties,
          icon: '/images/properties.png',
          handler: function() {
            var dialog = helpers.document.motion.getPropertiesDialog(record);
            dialog.show();
          }
        }]
      });
      e.stopEvent();
      gridMenu.showAt(e.getXY());
    }
  },

  refresh: function() {
    var vm = this.getViewModel();
    var store = vm.get('motions');
    store.load();
  }

});