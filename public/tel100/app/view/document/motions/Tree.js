/*
 * File: app/view/document/motions/Tree.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.document.motions.Tree', {
  extend: 'Ext.tree.Panel',
  alias: 'widget.documentmotionstree',

  requires: [
    'Tel100.view.document.motions.TreeViewModel',
    'Ext.toolbar.Toolbar',
    'Ext.button.Button',
    'Ext.toolbar.Spacer',
    'Ext.tree.View',
    'Ext.tree.Column'
  ],

  config: {
    selection: null
  },

  viewModel: {
    type: 'documentmotionstree'
  },
  border: false,
  bodyBorder: false,
  bodyCls: 'x-tree-noicon',
  autoLoad: true,
  enableColumnHide: false,
  hideHeaders: true,
  rowLines: true,
  lines: false,
  useArrows: true,

  bind: {
    selection: '{selection}',
    title: '{i18n.document.motion.tree}',
    store: '{motions}'
  },
  dockedItems: [
    {
      xtype: 'toolbar',
      dock: 'top',
      border: 0,
      items: [
        {
          xtype: 'button',
          handler: function(button, e) {
            this.up('documentmotionstree').refresh();
          },
          bind: {
            text: '{i18n.ui.refresh}'
          }
        },
        {
          xtype: 'tbspacer',
          flex: 1
        },
        {
          xtype: 'button',
          handler: function(button, e) {
            console.log('properties');
          },
          bind: {
            disabled: '{disableProperties}',
            text: '{i18n.ui.properties}'
          }
        }
      ]
    }
  ],
  viewConfig: {

  },
  columns: [
    {
      xtype: 'treecolumn',
      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var statusDecorator = function(status, text) {
          var decoration = helpers.document.status.statusDecoration(status);
          return '<span class="' + decoration.style + '">' +
          '<i class="fa ' + decoration.icon + '"></i> ' +
          text +
          '</span>';
        };

        if (record.get('root')) {
          var grid = view.up('documentmotionstree');
          var vm = grid.getViewModel();
          var doc = vm.get('document');
          var status = doc.get('status');
          var txt = '#<strong>' + doc.get('docnumber') + '</strong>: ' + doc.get('sender_name');
          return statusDecorator(status, txt);
        } else {
          var status = record.get('status');
          return statusDecorator(status, value);
        }
      },
      dataIndex: 'receiver',
      text: 'Receiver',
      flex: 1
    }
  ],

  refresh: function() {
    var vm = this.getViewModel();
    var store = vm.get('motions');
    store.load();
  }

});