/*
 * File: app/view/hr/tree/PanelViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.tree.PanelViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.hrtreepanel',

  searchAndExpand: function(view, rn, searchString, direction) {
    var found = rn.findChildBy(function(child){

      this.counter++;
      if(this.counter <= this.oldcounter){return false;}

      var text = child.get('full_name');
      if(text){
        return (text.indexOf(searchString) != -1);
      }
    }, this, true);

    if(found){
      this.oldcounter = this.counter;

      view.collapseAll();
      view.expandPath(found.getPath());
      view.getSelectionModel().select(found);
    }
  },

  startSearch: function() {
        var view = this.getView(),
          searchValue = view.down('textfield').getValue(),
          rn = view.getRootNode();

        this.counter = 0;
        this.oldcounter = 0;

        this.searchAndExpand(view, rn, searchValue);

        this.getView().down('#nextbutton').setDisabled(false);
  },

  onTreepanelBeforeLoad: function(store, operation, eOpts) {
    this.getView().setLoading(true);
  },

  onTreepanelLoad: function(treestore, records, successful, operation, node, eOpts) {
    this.getView().setLoading(false);
  },

  onRefresh: function(tool, e, owner, eOpts) {
    this.getView().refresh();
  },

  onSearchFieldChange: function(field, newValue, oldValue, eOpts) {
    this.counter = 0;
    this.oldcounter = 0;
    this.getView().down('#nextbutton').setDisabled(true);
  },

  onSearchFieldSpecialkey: function(field, e, eOpts) {
    if(e.getKey() == e.ENTER){
      this.startSearch();
    }
  },

  onSearchButtonClick: function(button, e, eOpts) {
    this.startSearch();
  },

  onNextSearchButtonClick: function(button, e, eOpts) {
    var view = this.getView(),
      rn = view.getRootNode(),
      searchValue = view.down('textfield').getValue();

    this.counter = 0;
    this.oldcounter++;

    this.searchAndExpand(view, rn, searchValue, 1);
  }

});
