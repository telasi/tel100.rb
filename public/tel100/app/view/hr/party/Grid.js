/*
 * File: app/view/hr/party/Grid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tel100.view.hr.party.Grid', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.hrpartygrid',

  requires: [
    'Tel100.view.hr.party.GridViewModel',
    'Tel100.view.hr.party.GridViewController',
    'Ext.grid.column.Number',
    'Ext.grid.View',
    'Ext.form.Panel',
    'Ext.form.field.Text',
    'Ext.button.Button'
  ],

  controller: 'hrpartygrid',
  viewModel: {
    type: 'hrpartygrid'
  },
  header: false,
  defaultListenerScope: true,

  bind: {
    title: '{i18n.hr.party.title}',
    store: '{party}'
  },
  columns: [
    {
      xtype: 'numbercolumn',
      dataIndex: 'identity',
      flex: 1,
      format: '0000',
      bind: {
        text: '{i18n.hr.party.fields.identity}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'name_ka',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.name}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'address_ka',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.address}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'phones',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.phones}'
      }
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'email',
      text: 'E-mail',
      flex: 1
    },
    {
      xtype: 'gridcolumn',
      dataIndex: 'contact_ka',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.contact}'
      }
    },
    {
      xtype: 'gridcolumn',
      hidden: true,
      dataIndex: 'account',
      flex: 1,
      bind: {
        text: '{i18n.hr.party.fields.account}'
      }
    }
  ],
  dockedItems: [
    {
      xtype: 'form',
      dock: 'bottom',
      width: 100,
      defaults: {
        anchor: '100%'
      },
      header: false,
      title: 'My Form',
      fieldDefaults: {
        labelAlign: 'right'
      },
      layout: {
        type: 'hbox',
        align: 'stretch'
      },
      items: [
        {
          xtype: 'container',
          flex: 1,
          layout: 'form',
          items: [
            {
              xtype: 'textfield',
              name: 'name',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.name}'
              }
            },
            {
              xtype: 'textfield',
              name: 'identity',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.identity}'
              }
            },
            {
              xtype: 'textfield',
              name: 'address',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.address}'
              }
            },
            {
              xtype: 'textfield',
              name: 'contact',
              bind: {
                fieldLabel: '{i18n.hr.party.fields.contact}'
              }
            }
          ]
        },
        {
          xtype: 'container',
          layout: {
            type: 'vbox',
            align: 'stretch',
            padding: 5
          },
          items: [
            {
              xtype: 'button',
              flex: 1,
              bind: {
                text: '{i18n.document.search.ui.search}'
              },
              listeners: {
                click: {
                  fn: 'onButtonClick1',
                  scope: 'controller'
                }
              }
            },
            {
              xtype: 'button',
              flex: 1,
              bind: {
                text: '{i18n.hr.party.add}'
              },
              listeners: {
                click: {
                  fn: 'onButtonClick',
                  scope: 'controller'
                }
              }
            }
          ]
        }
      ]
    }
  ],
  listeners: {
    afterrender: 'onGridpanelAfterRender'
  },

  onGridpanelAfterRender: function(component, eOpts) {
    component.addDocked(new Ext.PagingToolbar({
      displayInfo: true,
      dock: 'bottom',
      afterPageText: ' / {0}',
      beforePageText: i18n.ui.page,
      emptyMsg: i18n.ui.emptyMsg,
      displayMsg : i18n.ui.displayMsg,
      bind: {
        store: '{party}'
      }
    }));
  }

});